CCS PCH C Compiler, Version 3.221, 16465               01-apr-08 15.17

               Filename: C:\Documents and Settings\Lorenzo\Desktop\lcd\XYLCD2.LST

               ROM used: 12090 bytes (37%)
                         Largest free fragment is 20674
               RAM used: 1196 (78%) at main() level
                         1254 (82%) worst case
               Stack:    12 worst case (11 in main + 1 for interrupts)

*
0000:  GOTO   275E
*
0008:  MOVWF  05
000A:  MOVFF  FD8,06
000E:  MOVF   FE9,W
0010:  MOVWF  07
0012:  MOVF   FEA,W
0014:  MOVWF  08
0016:  MOVF   FE1,W
0018:  MOVWF  09
001A:  MOVF   FE2,W
001C:  MOVWF  0A
001E:  MOVF   FD9,W
0020:  MOVWF  0B
0022:  MOVF   FDA,W
0024:  MOVWF  0C
0026:  MOVF   FF3,W
0028:  MOVWF  14
002A:  MOVF   FF4,W
002C:  MOVWF  15
002E:  MOVF   FE0,W
0030:  MOVWF  0D
0032:  MOVLB  0
0034:  MOVF   00,W
0036:  MOVWF  0F
0038:  MOVF   01,W
003A:  MOVWF  10
003C:  MOVF   02,W
003E:  MOVWF  11
0040:  MOVF   03,W
0042:  MOVWF  12
0044:  MOVF   04,W
0046:  MOVWF  13
0048:  BTFSS  F9D.5
004A:  GOTO   0054
004E:  BTFSC  F9E.5
0050:  GOTO   04DE
0054:  MOVF   0F,W
0056:  MOVWF  00
0058:  MOVF   10,W
005A:  MOVWF  01
005C:  MOVF   11,W
005E:  MOVWF  02
0060:  MOVF   12,W
0062:  MOVWF  03
0064:  MOVF   13,W
0066:  MOVWF  04
0068:  MOVF   0D,W
006A:  MOVWF  FE0
006C:  BSF    0D.7
006E:  MOVF   07,W
0070:  MOVWF  FE9
0072:  MOVF   08,W
0074:  MOVWF  FEA
0076:  MOVF   09,W
0078:  MOVWF  FE1
007A:  MOVF   0A,W
007C:  MOVWF  FE2
007E:  MOVF   0B,W
0080:  MOVWF  FD9
0082:  MOVF   0C,W
0084:  MOVWF  FDA
0086:  MOVF   14,W
0088:  MOVWF  FF3
008A:  MOVF   15,W
008C:  MOVWF  FF4
008E:  MOVF   05,W
0090:  MOVFF  06,FD8
0094:  RETFIE 0
....................  #include "XYLCD2.h" 
....................  #include <18F4520.h> 
....................  //////// Standard Header file for the PIC18F4520 device ////////////////  
.................... #device PIC18F4520  
.................... #list  
....................  
.................... #device adc=10  
.................... #fuses intrc, nolvp,WDT512,NOBROWNOUT  
.................... #use delay(clock=32000000,restart_wdt)  
*
11C0:  MOVLW  04
11C2:  MOVWF  FEA
11C4:  MOVLW  A8
11C6:  MOVWF  FE9
11C8:  MOVF   FEF,W
11CA:  BZ    11F0
11CC:  MOVLW  0A
11CE:  MOVWF  01
11D0:  MOVLW  BF
11D2:  MOVWF  00
11D4:  CLRWDT
11D6:  DECFSZ 00,F
11D8:  BRA    11D4
11DA:  DECFSZ 01,F
11DC:  BRA    11D0
11DE:  MOVLW  5E
11E0:  MOVWF  00
11E2:  DECFSZ 00,F
11E4:  BRA    11E2
11E6:  NOP   
11E8:  NOP   
11EA:  CLRWDT
11EC:  DECFSZ FEF,F
11EE:  BRA    11CC
11F0:  RETLW  00
*
268C:  MOVLW  02
268E:  MOVLB  4
2690:  SUBWF  xA8,F
2692:  BNC   26B0
2694:  MOVLW  04
2696:  MOVWF  FEA
2698:  MOVLW  A8
269A:  MOVWF  FE9
269C:  MOVF   FEF,W
269E:  BZ    26B0
26A0:  BRA    26AC
26A2:  NOP   
26A4:  NOP   
26A6:  NOP   
26A8:  NOP   
26AA:  CLRWDT
26AC:  DECFSZ FEF,F
26AE:  BRA    26A2
26B0:  MOVLB  0
26B2:  GOTO   2E02 (RETURN)
.................... #use rs232(stream=rs232, baud=38400, parity=N, xmit=PIN_C6, rcv=PIN_C7, bits=8)  
....................  
.................... #include <S1D13700_1.C> 
....................  /////////////////////////////////////////////////////////////////////////  
.................... //// SED13700.C ////  
.................... //// ////  
.................... //// Example drivers for the SED13700 LCD controller configurada ////  
.................... //// no modo gen?io de comunica??? indireta(bus 8 bits, RW, RD, Ao)////  
.................... /////////////////////////////////////////////////////////////////////////  
.................... //// ////  
.................... //// glcd_init(mode) ////  
.................... //// * Must be called before any other function. ////  
.................... //// - mode can be ON or OFF to turn the LCD on or off ////  
.................... //// ////  
.................... //// glcd_pixel(x,y,color) ////  
.................... //// * Sets the pixel to the given color. ////  
.................... //// - color can be ON or OFF ////  
.................... //// ////  
.................... //// glcd_fillScreen(color) ////  
.................... //// * Fills the entire LCD with the given color. ////  
.................... //// - color can be ON or OFF ////  
.................... //// ////  
.................... /////////////////////////////////////////////////////////////////////////  
.................... //// (C) Copyright 1996,2003 Custom Computer Services ////  
.................... //// Modificado para S1d13700 por Eduardo Guilherme Brandt ////  
.................... //// 19/12/2006 ////  
.................... //// ?t.Altera??? 21/12/2006 ////  
.................... /////////////////////////////////////////////////////////////////////////  
.................... ////  
.................... //// Defini???s antes da carga do driver:  
.................... ////  
.................... ////  
.................... //// #define GLCD_WIDTH 320  
.................... //// #define GLCD_HEIGHT 240  
.................... //// #define GLCD_CHAR_WIDTH 8  
.................... //// #define GLCD_CHAR_HEIGHT 8  
.................... //// #define GLCD_RST PIN_XX //Apenas definir se n? tover resetado previamente(O driver faz o reset)  
.................... //// #define set_tris_lcd set_tris_d  
.................... //// #define input_lcd input_d  
.................... //// #define output_lcd output_d  
.................... //// #define GLCD_RD PIN_B5  
.................... //// #define GLCD_WR PIN_B1  
.................... //// #define GLCD_CS PIN_B2  
.................... //// #define GLCD_A0 PIN_B4  
.................... ////  
.................... //// #define LARGE_LCD //O driver define automaticamente se linhas ou colunas>256pontos(Ex. 320x240p?els)  
.................... ////  
.................... /////////////////////////////////////////////////////////////////////////  
.................... #ifndef S1D13700  
.................... #define S1D13700  
....................   
.................... #ifndef GLCD_WIDTH  
.................... #define GLCD_WIDTH 320  
.................... #define LARGE_LCD  
.................... #else  
.................... #if GLCD_WIDTH>256  
.................... #define LARGE_LCD  
.................... #endif  
.................... #endif  
....................   
.................... #ifndef GLCD_HEIGHT  
.................... #define GLCD_HEIGHT 240  
.................... #else  
.................... #if GLCD_WIDTH>256  
.................... #ifndef LARGE_LCD  
.................... #define LARGE_LCD  
.................... #endif  
.................... #endif  
.................... #endif  
....................   
.................... #ifndef GLCD_CHAR_WIDTH  
.................... #define GLCD_CHAR_WIDTH 8  
.................... #endif  
....................   
.................... #ifndef GLCD_CHAR_HEIGHT  
.................... #define GLCD_CHAR_HEIGHT 8  
.................... #endif  
....................   
.................... #ifndef GLCD_RST  
.................... #define GLCD_RST PIN_C3  
.................... #endif  
....................   
.................... #ifndef set_tris_lcd  
.................... #define set_tris_lcd set_tris_d  
.................... #endif  
....................   
.................... #ifndef input_lcd  
.................... #define input_lcd input_d  
.................... #endif  
....................   
.................... #ifndef output_lcd  
.................... #define output_lcd output_d  
.................... #endif  
....................   
.................... #ifndef GLCD_RD  
.................... #define GLCD_RD PIN_B5  
.................... #endif  
....................   
.................... #ifndef GLCD_WR  
.................... #define GLCD_WR PIN_B1  
.................... #endif  
....................   
.................... #ifndef GLCD_CS  
.................... #define GLCD_CS PIN_B2  
.................... #endif  
....................   
.................... #ifndef GLCD_A0  
.................... #define GLCD_A0 PIN_B4  
.................... #endif  
....................   
.................... #ifndef ON  
.................... #define ON 1  
.................... #endif  
....................   
.................... #ifndef OFF  
.................... #define OFF 0  
.................... #endif  
....................   
.................... #define _t1 1  
.................... #define _t2 2  
.................... /////////////////////////////////////////////////////////////////////////  
....................   
....................   
.................... /////////////////////////////////////////////////////////////////////////  
.................... // The following defines setup the memory used by different regions  
.................... // Currenty one text area is defined at the beginning of memory  
.................... // and a graphics area follows immediately after  
.................... /////////////////////////////////////////////////////////////////////////  
.................... #define GLCD_TEXT_ADDR 0x0000  
.................... #define GLCD_GRAPHICS_ADDR GLCD_WIDTH * GLCD_HEIGHT / 64  
.................... #define GLCD_GRAPHICS_ADDR_END GLCD_GRAPHICS_ADDR + (GLCD_WIDTH * GLCD_HEIGHT / 8)  
.................... /////////////////////////////////////////////////////////////////////////  
....................   
....................   
.................... /////////////////////////////////////////////////////////////////////////  
.................... #if GLCD_CHAR_WIDTH < 9  
.................... #define GLCD_CR (GLCD_WIDTH/8 - 1)  
.................... #else  
.................... #define GLCD_CR (GLCD_WIDTH/4 - 2)  
.................... #endif  
.................... /////////////////////////////////////////////////////////////////////////  
....................   
....................   
.................... /////////////////////////////////////////////////////////////////////////  
.................... #define TGLCD_COMMAND output_high(GLCD_A0);  
.................... #define TGLCD_DATA output_low(GLCD_A0);  
.................... /////////////////////////////////////////////////////////////////////////  
....................   
....................   
.................... /////////////////////////////////////////////////////////////////////////  
.................... int8 glcd_readByte();  
.................... void glcd_sendByte(int8 data);  
.................... void glcd_fillScreen(int1 color);  
.................... void glcd_fillScreenText(char c);  
.................... void setCursorAddress(int16 addr);  
.................... void glcd_pixel(int16 x, int16 y, int1 color);  
.................... void glcd_sendCMD(int8 cmd);  
.................... int16 getCursorAddress();  
.................... int8 getData(int16 addr);  
.................... int8 getStatus();  
.................... /////////////////////////////////////////////////////////////////////////  
....................   
.................... /////////////////////////////////////////////////////////////////////////  
.................... void glcd_systemSetup();  
.................... void glcd_scrollSetup();  
.................... void glcd_overlaySetup();  
.................... void glcd_power(int1 mode);  
.................... void glcd_cursorDirection(int8 dir);  
.................... void glcd_cursorForm(int8 width, int8 height);  
.................... void setData(int16 addr, int8 data);  
.................... /////////////////////////////////////////////////////////////////////////  
....................   
....................   
.................... #define GLCD_CMD_SYSTEM 0x40 // General system settings  
.................... #define GLCD_CMD_SLEEP 0x53 // Enter into standy mode  
.................... #define GLCD_CMD_DISP_OFF 0x58 // Turn the display off  
.................... #define GLCD_CMD_DISP_ON 0x59 // Turn the display on  
.................... #define GLCD_CMD_SCROLL 0x44 // Setup text and graphics address regions  
.................... #define GLCD_CMD_CSR_FORM 0x5D // Set cursor size  
.................... #define GLCD_CMD_CSRDIR_RIGHT 0x4C // Cursor moves right after write to display memory  
.................... #define GLCD_CMD_CSRDIR_LEFT 0x4D // Cursor moves left after write to display memory  
.................... #define GLCD_CMD_CSRDIR_UP 0x4E // Cursor moves up after write to display memory  
.................... #define GLCD_CMD_CSRDIR_DN 0x4F // Cursor moves down after write to display memory  
.................... #define GLCD_CMD_CGRAM_ADDR 0x5C // Configure character generator RAM address  
.................... #define GLCD_CMD_HDOT_SCR 0x5A // Set horizontal scroll rate  
.................... #define GLCD_CMD_OVERLAY 0x5B // Configure how layers overlay  
.................... #define GLCD_CMD_SET_CSR_ADDR 0x46 // Set the cursor address  
.................... #define GLCD_CMD_GET_CSR_ADDR 0x47 // Read the cursor address  
.................... #define GLCD_CMD_DISPLAY_WRITE 0x42 // Write to display memory  
.................... #define GLCD_CMD_DISPLAY_READ 0x43 // Read from display memory  
....................   
....................   
.................... // Purpose: Initialize the controller  
.................... // Inputs: The initialization mode  
.................... // OFF - Turns the LCD off  
.................... // ON - Turns the LCD on  
.................... void glcd_init(int1 mode)  
.................... {  
.................... // Initialze some pins  
.................... #ifdef GLCD_RST //Sup?-se que o dispositivo ja foi resetado  
.................... output_high(GLCD_RST);  
*
078E:  BCF    F94.3
0790:  BSF    F8B.3
.................... #endif  
.................... output_high(GLCD_CS);  
0792:  BCF    F93.2
0794:  BSF    F8A.2
.................... output_high(GLCD_RD);  
0796:  BCF    F93.5
0798:  BSF    F8A.5
.................... output_high(GLCD_WR);  
079A:  BCF    F93.1
079C:  BSF    F8A.1
....................   
.................... glcd_systemSetup();  
079E:  BRA    0560
.................... glcd_scrollSetup();  
07A0:  BRA    05C0
.................... glcd_overlaySetup();  
07A2:  BRA    0640
.................... glcd_power(OFF);  
07A4:  MOVLB  4
07A6:  CLRF   xA8
07A8:  MOVLB  0
07AA:  RCALL  065C
.................... glcd_cursorForm(4, 6);  
07AC:  MOVLW  04
07AE:  MOVLB  4
07B0:  MOVWF  xA8
07B2:  MOVLW  06
07B4:  MOVWF  xA9
07B6:  MOVLB  0
07B8:  BRA    0686
.................... glcd_fillScreen(OFF);  
07BA:  MOVLB  4
07BC:  CLRF   xA8
07BE:  MOVLB  0
07C0:  RCALL  06EA
.................... glcd_fillScreenText(' ');  
07C2:  MOVLW  20
07C4:  MOVLB  4
07C6:  MOVWF  xA8
07C8:  MOVLB  0
07CA:  BRA    0740
.................... glcd_power(mode);  
07CC:  MOVFF  4A7,4A8
07D0:  RCALL  065C
.................... glcd_cursorDirection(GLCD_CMD_CSRDIR_RIGHT);  
07D2:  MOVLW  4C
07D4:  MOVLB  4
07D6:  MOVWF  xA8
07D8:  MOVLB  0
07DA:  BRA    0784
.................... }  
07DC:  GOTO   2806 (RETURN)
....................   
....................   
.................... // Purpose: Turn a pixel on a graphic LCD on or off  
.................... // Inputs: x - the x coordinate of the pixel  
.................... // y - the y coordinate of the pixel  
.................... // color - ON or OFF  
.................... void glcd_pixel(int16 x, int16 y, int1 color)  
.................... {  
.................... int8 data;  
.................... int16 addr;  
....................   
.................... // Calculate the byte address containing the pixel  
.................... addr = GLCD_GRAPHICS_ADDR + (GLCD_WIDTH/8 * y + x/8);  
*
0870:  MOVLB  4
0872:  CLRF   xDB
0874:  MOVLW  28
0876:  MOVWF  xDA
0878:  MOVFF  4D5,4DD
087C:  MOVFF  4D4,4DC
0880:  MOVLB  0
0882:  RCALL  07E0
0884:  MOVFF  02,4DB
0888:  MOVFF  01,4DA
088C:  MOVLB  4
088E:  RRCF   xD3,W
0890:  MOVWF  03
0892:  RRCF   xD2,W
0894:  MOVWF  02
0896:  RRCF   03,F
0898:  RRCF   02,F
089A:  RRCF   03,F
089C:  RRCF   02,F
089E:  MOVLW  1F
08A0:  ANDWF  03,F
08A2:  MOVF   02,W
08A4:  ADDWF  01,W
08A6:  MOVWF  01
08A8:  MOVF   xDB,W
08AA:  ADDWFC 03,F
08AC:  MOVF   01,W
08AE:  ADDLW  B0
08B0:  MOVWF  xD8
08B2:  MOVLW  04
08B4:  ADDWFC 03,W
08B6:  MOVWF  xD9
....................   
.................... // Read the byte of data at the address  
.................... data = getData(addr);  
08B8:  MOVFF  4D9,4DB
08BC:  MOVFF  4D8,4DA
08C0:  MOVLB  0
08C2:  BRA    082E
08C4:  MOVFF  01,4D7
....................   
.................... // Turn the pixel on or off  
.................... if(color == ON)  
08C8:  MOVLB  4
08CA:  DECFSZ xD6,W
08CC:  BRA    08FC
.................... bit_set(data, 7 - x%8);  
08CE:  MOVF   xD2,W
08D0:  ANDLW  07
08D2:  MOVWF  00
08D4:  CLRF   03
08D6:  MOVF   00,W
08D8:  XORLW  FF
08DA:  ADDLW  08
08DC:  MOVWF  xDA
08DE:  MOVLW  00
08E0:  SUBFWB 03,W
08E2:  MOVWF  xDB
08E4:  MOVLW  01
08E6:  MOVWF  00
08E8:  MOVF   xDA,W
08EA:  MOVWF  01
08EC:  BZ    08F6
08EE:  BCF    FD8.0
08F0:  RLCF   00,F
08F2:  DECFSZ 01,F
08F4:  BRA    08EE
08F6:  MOVF   00,W
08F8:  IORWF  xD7,F
.................... else  
08FA:  BRA    092A
.................... bit_clear(data, 7 - x%8);  
08FC:  MOVF   xD2,W
08FE:  ANDLW  07
0900:  MOVWF  00
0902:  CLRF   03
0904:  MOVF   00,W
0906:  XORLW  FF
0908:  ADDLW  08
090A:  MOVWF  xDA
090C:  MOVLW  00
090E:  SUBFWB 03,W
0910:  MOVWF  xDB
0912:  MOVLW  01
0914:  MOVWF  00
0916:  MOVF   xDA,W
0918:  MOVWF  01
091A:  BZ    0924
091C:  BCF    FD8.0
091E:  RLCF   00,F
0920:  DECFSZ 01,F
0922:  BRA    091C
0924:  MOVF   00,W
0926:  XORLW  FF
0928:  ANDWF  xD7,F
....................   
.................... /* setData(0x0000, 49);  
.................... setData(0x0001, 50);  
.................... setData(0x0002, 51); uuuuuuuuuuuuuu  
.................... setData(0x0003, 52);  
....................   
.................... setData(0x0100, 49);  
.................... setData(0x0101, 50);  
.................... setData(0x0102, 51);  
.................... setData(0x0103, 52); */  
.................... // addr = getCursorAddress(); //hehe  
.................... // data = getData(0x0103);  
....................   
.................... // Write the new data byte to display memory  
.................... setData(addr, data);  
092A:  MOVFF  4D9,4DB
092E:  MOVFF  4D8,4DA
0932:  MOVFF  4D7,4DC
0936:  MOVLB  0
0938:  BRA    084E
.................... }  
093A:  RETLW  00
....................   
....................   
.................... // Purpose: Initialize the display environment  
.................... void glcd_systemSetup()  
.................... {  
.................... glcd_sendCMD(GLCD_CMD_SYSTEM); // Setup the system  
*
0560:  MOVLW  40
0562:  MOVLB  4
0564:  MOVWF  xDF
0566:  MOVLB  0
0568:  RCALL  0554
.................... TGLCD_DATA // Set for data  
056A:  BCF    F93.4
056C:  BCF    F8A.4
.................... glcd_sendByte(0x30); // No offset  
056E:  MOVLW  30
0570:  MOVLB  4
0572:  MOVWF  xE0
0574:  MOVLB  0
0576:  RCALL  0534
.................... glcd_sendByte(0x7F + GLCD_CHAR_WIDTH); // Set character width  
0578:  MOVLW  87
057A:  MOVLB  4
057C:  MOVWF  xE0
057E:  MOVLB  0
0580:  RCALL  0534
.................... glcd_sendByte(GLCD_CHAR_HEIGHT - 1); // Set character height  
0582:  MOVLW  07
0584:  MOVLB  4
0586:  MOVWF  xE0
0588:  MOVLB  0
058A:  RCALL  0534
.................... glcd_sendByte(GLCD_CR); // Display line address range  
058C:  MOVLW  27
058E:  MOVLB  4
0590:  MOVWF  xE0
0592:  MOVLB  0
0594:  RCALL  0534
.................... glcd_sendByte(0x2F); // TC/R  
0596:  MOVLW  2F
0598:  MOVLB  4
059A:  MOVWF  xE0
059C:  MOVLB  0
059E:  RCALL  0534
.................... glcd_sendByte(GLCD_HEIGHT - 1); // Number of lines per frame  
05A0:  MOVLW  EF
05A2:  MOVLB  4
05A4:  MOVWF  xE0
05A6:  MOVLB  0
05A8:  RCALL  0534
.................... glcd_sendByte(GLCD_CR + 1); // Horizontal address range LSB (APL)  
05AA:  MOVLW  28
05AC:  MOVLB  4
05AE:  MOVWF  xE0
05B0:  MOVLB  0
05B2:  RCALL  0534
.................... glcd_sendByte((GLCD_CR + 1) / 0xFF); // Horizontal address range MSB (APH)  
05B4:  MOVLB  4
05B6:  CLRF   xE0
05B8:  MOVLB  0
05BA:  RCALL  0534
.................... }  
05BC:  GOTO   07A0 (RETURN)
....................   
....................   
.................... // Purpose: Set the scroll start address and  
.................... // the size of a scroll block  
.................... void glcd_scrollSetup()  
.................... {  
.................... // Currently setup for a text and graphics layer  
.................... glcd_sendCMD(GLCD_CMD_SCROLL); // Setup scrolling  
05C0:  MOVLW  44
05C2:  MOVLB  4
05C4:  MOVWF  xDF
05C6:  MOVLB  0
05C8:  RCALL  0554
.................... TGLCD_DATA // Set for data  
05CA:  BCF    F93.4
05CC:  BCF    F8A.4
.................... glcd_sendByte(GLCD_TEXT_ADDR); // SAD1L  
05CE:  MOVLB  4
05D0:  CLRF   xE0
05D2:  MOVLB  0
05D4:  RCALL  0534
.................... glcd_sendByte(GLCD_TEXT_ADDR / 0xFF); // SAD1H  
05D6:  MOVLB  4
05D8:  CLRF   xE0
05DA:  MOVLB  0
05DC:  RCALL  0534
.................... glcd_sendByte(GLCD_HEIGHT - 1); // SL1  
05DE:  MOVLW  EF
05E0:  MOVLB  4
05E2:  MOVWF  xE0
05E4:  MOVLB  0
05E6:  RCALL  0534
.................... glcd_sendByte(GLCD_GRAPHICS_ADDR); // SAD2L  
05E8:  MOVLW  B0
05EA:  MOVLB  4
05EC:  MOVWF  xE0
05EE:  MOVLB  0
05F0:  RCALL  0534
.................... glcd_sendByte(GLCD_GRAPHICS_ADDR / 0xFF); // SAD2H  
05F2:  MOVLW  04
05F4:  MOVLB  4
05F6:  MOVWF  xE0
05F8:  MOVLB  0
05FA:  RCALL  0534
.................... glcd_sendByte(GLCD_HEIGHT - 1); // SL2  
05FC:  MOVLW  EF
05FE:  MOVLB  4
0600:  MOVWF  xE0
0602:  MOVLB  0
0604:  RCALL  0534
.................... glcd_sendByte(0x00); // SAD3L  
0606:  MOVLB  4
0608:  CLRF   xE0
060A:  MOVLB  0
060C:  RCALL  0534
.................... glcd_sendByte(0x00); // SAD3H  
060E:  MOVLB  4
0610:  CLRF   xE0
0612:  MOVLB  0
0614:  RCALL  0534
.................... glcd_sendByte(0x00); // SAD4L  
0616:  MOVLB  4
0618:  CLRF   xE0
061A:  MOVLB  0
061C:  RCALL  0534
.................... glcd_sendByte(0x00); // SAD4H  
061E:  MOVLB  4
0620:  CLRF   xE0
0622:  MOVLB  0
0624:  RCALL  0534
....................   
.................... glcd_sendCMD(GLCD_CMD_HDOT_SCR); // Horizontal scroll rate  
0626:  MOVLW  5A
0628:  MOVLB  4
062A:  MOVWF  xDF
062C:  MOVLB  0
062E:  RCALL  0554
.................... TGLCD_DATA // Set for data  
0630:  BCF    F93.4
0632:  BCF    F8A.4
.................... glcd_sendByte(0x00); // Horizontal pixel shift is 0  
0634:  MOVLB  4
0636:  CLRF   xE0
0638:  MOVLB  0
063A:  RCALL  0534
.................... }  
063C:  GOTO   07A2 (RETURN)
....................   
....................   
.................... // Purpose: Setup the overlay functionality for combining  
.................... // layers of text and graphics, or multiple  
.................... // graphics layers  
.................... void glcd_overlaySetup()  
.................... {  
.................... // Currently setup for a single graphics layer  
.................... glcd_sendCMD(GLCD_CMD_OVERLAY); // Text / graphic overlay mode  
0640:  MOVLW  5B
0642:  MOVLB  4
0644:  MOVWF  xDF
0646:  MOVLB  0
0648:  RCALL  0554
.................... TGLCD_DATA // Set for data  
064A:  BCF    F93.4
064C:  BCF    F8A.4
.................... glcd_sendByte(0x09); // Area 1 text, others graphics  
064E:  MOVLW  09
0650:  MOVLB  4
0652:  MOVWF  xE0
0654:  MOVLB  0
0656:  RCALL  0534
.................... // Text XOR Graphics  
.................... }  
0658:  GOTO   07A4 (RETURN)
....................   
....................   
.................... // Purpose: Turn the display on or off  
.................... // Inputs: ON to turn on or OFF to turn off  
.................... void glcd_power(int1 mode)  
.................... {  
.................... if(mode == ON)  
065C:  MOVLB  4
065E:  DECFSZ xA8,W
0660:  BRA    066E
.................... {  
.................... glcd_sendCMD(GLCD_CMD_DISP_ON); // Turn the display on  
0662:  MOVLW  59
0664:  MOVWF  xDF
0666:  MOVLB  0
0668:  RCALL  0554
.................... }  
.................... else  
066A:  BRA    0676
066C:  MOVLB  4
.................... {  
.................... glcd_sendCMD(GLCD_CMD_DISP_OFF); // Turn the display off  
066E:  MOVLW  58
0670:  MOVWF  xDF
0672:  MOVLB  0
0674:  RCALL  0554
.................... }  
....................   
.................... TGLCD_DATA // Set for data  
0676:  BCF    F93.4
0678:  BCF    F8A.4
.................... glcd_sendByte(0x14);  
067A:  MOVLW  14
067C:  MOVLB  4
067E:  MOVWF  xE0
0680:  MOVLB  0
0682:  RCALL  0534
.................... }  
0684:  RETLW  00
....................   
....................   
.................... // Purpose: Set the direction the cursor moves after  
.................... // writing to dispaly memory  
.................... // Inputs: Use one of the following to set the direction:  
.................... // GLCD_CMD_CSRDIR_RIGHT  
.................... // GLCD_CMD_CSRDIR_LEFT  
.................... // GLCD_CMD_CSRDIR_UP  
.................... // GLCD_CMD_CSRDIR_DOWN  
.................... void glcd_cursorDirection(int8 dir)  
.................... {  
.................... glcd_sendCMD(dir);  
*
0784:  MOVFF  4A8,4DF
0788:  RCALL  0554
.................... }  
078A:  GOTO   07DC (RETURN)
....................   
....................   
.................... // Purpose: Set the size of the cursor  
.................... // Inputs: 1) The width in pixels - 1 Valid numbers: (0 - 15)  
.................... // 2) The height in pixels - 1 Valid numbers: (1 - 15)  
.................... void glcd_cursorForm(int8 width, int8 height)  
.................... {  
.................... glcd_sendCMD(GLCD_CMD_CSR_FORM); // Cursor form and size  
*
0686:  MOVLW  5D
0688:  MOVLB  4
068A:  MOVWF  xDF
068C:  MOVLB  0
068E:  RCALL  0554
.................... TGLCD_DATA // Set for data  
0690:  BCF    F93.4
0692:  BCF    F8A.4
.................... glcd_sendByte(width);  
0694:  MOVFF  4A8,4E0
0698:  RCALL  0534
.................... glcd_sendByte(0x80 + height);  
069A:  MOVLW  80
069C:  MOVLB  4
069E:  ADDWF  xA9,W
06A0:  MOVWF  xAA
06A2:  MOVFF  4AA,4E0
06A6:  MOVLB  0
06A8:  RCALL  0534
.................... }  
06AA:  GOTO   07BA (RETURN)
....................   
....................   
.................... // Purpose: Fill a graphics layer passed in color  
.................... // Works much faster than drawing a rectangle to fill the screen  
.................... // Inputs: ON - turn all the pixels on  
.................... // OFF - turn all the pixels off  
.................... void glcd_fillScreen(int1 color)  
.................... {  
.................... int16 i;  
....................   
.................... setCursorAddress(GLCD_GRAPHICS_ADDR);  
*
06EA:  MOVLW  04
06EC:  MOVLB  4
06EE:  MOVWF  xAC
06F0:  MOVLW  B0
06F2:  MOVWF  xDD
06F4:  MOVFF  4AC,4DE
06F8:  MOVLB  0
06FA:  RCALL  06AE
.................... glcd_sendCMD(GLCD_CMD_DISPLAY_WRITE);  
06FC:  MOVLW  42
06FE:  MOVLB  4
0700:  MOVWF  xDF
0702:  MOVLB  0
0704:  RCALL  0554
.................... TGLCD_DATA  
0706:  BCF    F93.4
0708:  BCF    F8A.4
....................   
.................... for(i = GLCD_GRAPHICS_ADDR; i < GLCD_GRAPHICS_ADDR_END; ++i)  
070A:  MOVLW  04
070C:  MOVLB  4
070E:  MOVWF  xAA
0710:  MOVLW  B0
0712:  MOVWF  xA9
0714:  MOVF   xAA,W
0716:  SUBLW  2A
0718:  BNC   073C
071A:  BNZ   0722
071C:  MOVF   xA9,W
071E:  SUBLW  2F
0720:  BNC   073C
.................... {  
.................... glcd_sendByte(0xFF * color);  
0722:  MOVF   xA8,W
0724:  MULLW  FF
0726:  MOVFF  FF3,4AB
072A:  MOVFF  4AB,4E0
072E:  MOVLB  0
0730:  RCALL  0534
.................... }  
0732:  MOVLB  4
0734:  INCF   xA9,F
0736:  BTFSC  FD8.2
0738:  INCF   xAA,F
073A:  BRA    0714
.................... }  
073C:  MOVLB  0
073E:  RETLW  00
....................   
....................   
.................... // Purpose: Fill a text layer with a the passed in character  
.................... // Works much faster than drawing a rectangle to fill the screen  
.................... // Inputs: ON - turn all the pixels on  
.................... // OFF - turn all the pixels off  
.................... void glcd_fillScreenText(char c)  
.................... {  
.................... int16 i;  
....................   
.................... setCursorAddress(GLCD_TEXT_ADDR);  
0740:  MOVLB  4
0742:  CLRF   xDE
0744:  CLRF   xDD
0746:  MOVLB  0
0748:  RCALL  06AE
.................... glcd_sendCMD(GLCD_CMD_DISPLAY_WRITE);  
074A:  MOVLW  42
074C:  MOVLB  4
074E:  MOVWF  xDF
0750:  MOVLB  0
0752:  RCALL  0554
.................... TGLCD_DATA  
0754:  BCF    F93.4
0756:  BCF    F8A.4
....................   
.................... for(i = GLCD_TEXT_ADDR; i < GLCD_GRAPHICS_ADDR; ++i)  
0758:  MOVLB  4
075A:  CLRF   xAA
075C:  CLRF   xA9
075E:  MOVF   xAA,W
0760:  SUBLW  04
0762:  BNC   077E
0764:  BNZ   076C
0766:  MOVF   xA9,W
0768:  SUBLW  AF
076A:  BNC   077E
.................... {  
.................... glcd_sendByte(c);  
076C:  MOVFF  4A8,4E0
0770:  MOVLB  0
0772:  RCALL  0534
.................... }  
0774:  MOVLB  4
0776:  INCF   xA9,F
0778:  BTFSC  FD8.2
077A:  INCF   xAA,F
077C:  BRA    075E
.................... }  
077E:  MOVLB  0
0780:  GOTO   07CC (RETURN)
....................   
....................   
.................... // Purpose: Write a byte of data  
.................... // Inputs: The byte of data to write  
.................... void glcd_sendByte(byte data)  
.................... {  
.................... output_lcd((data));  
*
0534:  MOVLW  00
0536:  MOVWF  F95
0538:  MOVFF  4E0,F8C
.................... output_low(GLCD_CS);  
053C:  BCF    F93.2
053E:  BCF    F8A.2
.................... delay_cycles(_t1);  
0540:  NOP   
.................... output_low(GLCD_WR);  
0542:  BCF    F93.1
0544:  BCF    F8A.1
.................... delay_cycles(_t2);  
0546:  NOP   
0548:  NOP   
.................... output_high(GLCD_WR);  
054A:  BCF    F93.1
054C:  BSF    F8A.1
.................... output_high(GLCD_CS);  
054E:  BCF    F93.2
0550:  BSF    F8A.2
.................... }  
0552:  RETLW  00
....................   
....................   
.................... // Purpose: Read a byte of data  
.................... // Outputs: The byte of data  
.................... int8 glcd_readByte()  
.................... {  
.................... byte data;  
.................... set_tris_lcd(0xFF);  
*
0802:  MOVLW  FF
0804:  MOVWF  F95
.................... output_low(GLCD_CS);  
0806:  BCF    F93.2
0808:  BCF    F8A.2
.................... delay_cycles(_t1);  
080A:  NOP   
.................... output_low(GLCD_RD);  
080C:  BCF    F93.5
080E:  BCF    F8A.5
.................... delay_cycles(_t2);  
0810:  NOP   
0812:  NOP   
.................... data = input_lcd();  
0814:  MOVWF  F95
0816:  MOVFF  F83,4DC
.................... output_high(GLCD_RD);  
081A:  BCF    F93.5
081C:  BSF    F8A.5
.................... output_high(GLCD_CS);  
081E:  BCF    F93.2
0820:  BSF    F8A.2
....................   
.................... return data;  
0822:  MOVLB  4
0824:  MOVFF  4DC,01
.................... }  
0828:  MOVLB  0
082A:  GOTO   0848 (RETURN)
....................   
....................   
.................... // Purpose: Get the status  
.................... // Outputs: The status in an 8 bit integer  
.................... int8 getStatus()  
.................... {  
.................... int8 status;  
.................... TGLCD_DATA  
.................... output_low(GLCD_CS);  
.................... output_low(GLCD_RD);  
.................... delay_us(_t1);  
.................... status = input_lcd();  
.................... output_high(GLCD_RD);  
.................... output_high(GLCD_CS);  
....................   
.................... return status;  
.................... }  
....................   
....................   
.................... // Purpose: Get the current address of the cursor  
.................... // Outputs: A 16 bit integer containing the cursor address  
.................... int16 getCursorAddress()  
.................... {  
.................... int16 addr;  
....................   
.................... glcd_sendCMD(GLCD_CMD_GET_CSR_ADDR);  
.................... TGLCD_COMMAND //CORRECAO - MODIFIED LINE  
.................... // TGLCD_DATA; //CORRECAO  
.................... *(int8*)(&addr ) = glcd_readByte(); // Read low part  
.................... *(int8*)(&addr + 1) = glcd_readByte(); // Read high part  
....................   
.................... return addr;  
.................... }  
....................   
....................   
.................... // Purpose: Set the cursor address  
.................... // Inputs: A 16 bit integer containing the new cursor address  
.................... void setCursorAddress(int16 addr)  
.................... {  
.................... glcd_sendCMD(GLCD_CMD_SET_CSR_ADDR);  
*
06AE:  MOVLW  46
06B0:  MOVLB  4
06B2:  MOVWF  xDF
06B4:  MOVLB  0
06B6:  RCALL  0554
.................... TGLCD_DATA  
06B8:  BCF    F93.4
06BA:  BCF    F8A.4
.................... glcd_sendByte(*(int8*)(&addr ));  
06BC:  MOVLW  04
06BE:  MOVWF  03
06C0:  MOVLW  DD
06C2:  MOVWF  FE9
06C4:  MOVFF  03,FEA
06C8:  MOVFF  FEF,4DF
06CC:  MOVFF  4DF,4E0
06D0:  RCALL  0534
.................... glcd_sendByte(*(int8*)(&addr + 1));  
06D2:  MOVLW  04
06D4:  MOVWF  03
06D6:  MOVLW  DE
06D8:  MOVWF  FE9
06DA:  MOVFF  03,FEA
06DE:  MOVFF  FEF,4DF
06E2:  MOVFF  4DF,4E0
06E6:  RCALL  0534
.................... }  
06E8:  RETLW  00
....................   
....................   
.................... // Purpose: Get a byte of data from the display at the address  
.................... // Inputs: A 16 bit integer containing the address  
.................... // Outputs: An 8 bit integer with the read data  
.................... int8 getData(int16 addr)  
.................... {  
.................... setCursorAddress(addr);  
*
082E:  MOVFF  4DB,4DE
0832:  MOVFF  4DA,4DD
0836:  RCALL  06AE
.................... glcd_sendCMD(GLCD_CMD_DISPLAY_READ);  
0838:  MOVLW  43
083A:  MOVLB  4
083C:  MOVWF  xDF
083E:  MOVLB  0
0840:  RCALL  0554
.................... TGLCD_COMMAND //CORRECAO - MODIFIED LINE  
0842:  BCF    F93.4
0844:  BSF    F8A.4
.................... // TGLCD_DATA //CORRECAO  
.................... return glcd_readByte();  
0846:  BRA    0802
0848:  MOVF   01,W
.................... }  
084A:  GOTO   08C4 (RETURN)
....................   
....................   
.................... // Purpose: Set a byte of display data at an address  
.................... // Inputs: 1) A 16 bit address  
.................... // 2) 8 bits worth  
.................... void setData(int16 addr, int8 data)  
.................... {  
.................... setCursorAddress(addr);  
084E:  MOVFF  4DB,4DE
0852:  MOVFF  4DA,4DD
0856:  RCALL  06AE
.................... glcd_sendCMD(GLCD_CMD_DISPLAY_WRITE);  
0858:  MOVLW  42
085A:  MOVLB  4
085C:  MOVWF  xDF
085E:  MOVLB  0
0860:  RCALL  0554
.................... TGLCD_DATA  
0862:  BCF    F93.4
0864:  BCF    F8A.4
.................... glcd_sendByte(data);  
0866:  MOVFF  4DC,4E0
086A:  RCALL  0534
.................... }  
086C:  GOTO   093A (RETURN)
....................   
....................   
.................... // Purpose: Send an 8 bit command  
.................... // Inputs: The command to send  
.................... void glcd_sendCMD(int8 cmd)  
.................... {  
.................... TGLCD_COMMAND  
*
0554:  BCF    F93.4
0556:  BSF    F8A.4
.................... glcd_sendByte(cmd);  
0558:  MOVFF  4DF,4E0
055C:  RCALL  0534
.................... }  
055E:  RETLW  00
....................   
.................... #endif   
....................  
.................... #include <GRAPHICS.C> 
....................  /////////////////////////////////////////////////////////////////////////  
.................... ////                          graphics.c                             ////  
.................... ////                                                                 ////  
.................... ////   This file contains functions to draw lines, rectangles, bars, ////  
.................... ////   circles and text to a display. A function which draws a       ////  
.................... ////   single pixel must be defined before calling the functions in  ////  
.................... ////   this file. Call it glcd_pixel(x, y, color) where x is the     ////  
.................... ////   horizontal coordinate, y is the vertical coordinate, and      ////  
.................... ////   color is 1 bit to turn the pixel on or off.                   ////  
.................... ////                                                                 ////  
.................... ////   * Note: (0, 0) is treated as the upper left corner            ////  
.................... ////                                                                 ////  
.................... /////////////////////////////////////////////////////////////////////////  
.................... ////                                                                 ////  
.................... ////  glcd_line(x1, y1, x2, y2, color)                               ////  
.................... ////     * Draws a line from the first point to the second point     ////  
.................... ////       with the given color                                      ////  
.................... ////       - color can be ON or OFF                                  ////  
.................... ////                                                                 ////  
.................... ////  glcd_rect(x1, y1, x2, y2, fill, color)                         ////  
.................... ////     * Draws a rectangle with one corner at point (x1,y1) and    ////  
.................... ////       the other corner at point (x2,y2)                         ////  
.................... ////       - fill can be YES or NO                                   ////  
.................... ////       - color can be ON or OFF                                  ////  
.................... ////                                                                 ////  
.................... ////  glcd_bar(x1, y1, x2, y2, width, color)                         ////  
.................... ////     * Draws a bar (wide line) from the first point to the       ////  
.................... ////       second point                                              ////  
.................... ////       - width is the number of pixels wide                      ////  
.................... ////       - color is ON or OFF                                      ////  
.................... ////                                                                 ////  
.................... ////  glcd_circle(x, y, radius, fill, color)                         ////  
.................... ////     * Draws a circle with center at (x,y)                       ////  
.................... ////       - fill can be YES or NO                                   ////  
.................... ////       - color can be ON or OFF                                  ////  
.................... ////                                                                 ////  
.................... ////  glcd_text57(x, y, textptr, size, color)                        ////  
.................... ////     * Write the null terminated text pointed to by textptr with ////  
.................... ////       the upper left coordinate of the first character at (x,y) ////  
.................... ////       Characters are 5 pixels wide and 7 pixels tall            ////  
.................... ////       - size is an integer that scales the size of the text     ////  
.................... ////       - color is ON or OFF                                      ////  
.................... ////     * Note - This function wraps characters to the next line    ////  
.................... ////              use #define GLCD_WIDTH to specify a display width  ////  
.................... ////                                                                 ////  
.................... /////////////////////////////////////////////////////////////////////////  
.................... ////        (C) Copyright 1996, 2004 Custom Computer Services        ////  
.................... //// This source code may only be used by licensed users of the CCS  ////  
.................... //// C compiler.  This source code may only be distributed to other  ////  
.................... //// licensed users of the CCS C compiler.  No other use,            ////  
.................... //// reproduction or distribution is permitted without written       ////  
.................... //// permission.  Derivative programs created using this software    ////  
.................... //// in object code form are not restricted in any way.              ////  
.................... /////////////////////////////////////////////////////////////////////////  
....................   
....................   
.................... /////////////////////////////////////////////////////////////////////////  
.................... #ifndef GRAPHICS_DRAWING_FUNCTIONS  
.................... #define GRAPHICS_DRAWING_FUNCTIONS  
.................... /////////////////////////////////////////////////////////////////////////  
....................   
....................   
.................... /////////////////////////////////////////////////////////////////////////  
.................... #ifndef ON  
.................... #define ON  1  
.................... #endif  
....................   
.................... #ifndef OFF  
.................... #define OFF 0  
.................... #endif  
....................   
.................... #ifndef YES  
.................... #define YES 1  
.................... #endif  
....................   
.................... #ifndef NO  
.................... #define NO  0  
.................... #endif  
.................... /////////////////////////////////////////////////////////////////////////  
....................   
....................   
.................... /////////////////////////////////////////////////////////////////////////  
.................... //// Defines a 5x7 font  
.................... /////////////////////////////////////////////////////////////////////////  
.................... const int8 FONT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE  
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // !  
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // "  
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // #  
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $  
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // %  
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // &  
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // '  
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // (  
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // )  
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // *  
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // +  
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // ,  
....................                          0x08, 0x08, 0x08, 0x08, 0x08, // -  
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // .  
....................                          0x20, 0x10, 0x08, 0x04, 0x02, // /  
....................                          0x3E, 0x51, 0x49, 0x45, 0x3E, // 0  
....................                          0x00, 0x04, 0x02, 0x7F, 0x00, // 1  
....................                          0x42, 0x61, 0x51, 0x49, 0x46, // 2  
....................                          0x22, 0x41, 0x49, 0x49, 0x36, // 3  
....................                          0x18, 0x14, 0x12, 0x7F, 0x10, // 4  
....................                          0x27, 0x45, 0x45, 0x45, 0x39, // 5  
....................                          0x3E, 0x49, 0x49, 0x49, 0x32, // 6  
....................                          0x01, 0x01, 0x71, 0x09, 0x07, // 7  
....................                          0x36, 0x49, 0x49, 0x49, 0x36, // 8  
....................                          0x26, 0x49, 0x49, 0x49, 0x3E, // 9  
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // :  
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ;  
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // <  
....................                          0x14, 0x14, 0x14, 0x14, 0x14, // =  
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // >  
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @  
....................                          0x7E, 0x09, 0x09, 0x09, 0x7E, // A  
....................                          0x7F, 0x49, 0x49, 0x49, 0x36, // B  
....................                          0x3E, 0x41, 0x41, 0x41, 0x22, // C  
....................                          0x7F, 0x41, 0x41, 0x41, 0x3E, // D  
....................                          0x7F, 0x49, 0x49, 0x49, 0x41, // E  
....................                          0x7F, 0x09, 0x09, 0x09, 0x01, // F  
....................                          0x3E, 0x41, 0x41, 0x49, 0x3A, // G  
....................                          0x7F, 0x08, 0x08, 0x08, 0x7F, // H  
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I  
....................                          0x30, 0x40, 0x40, 0x40, 0x3F, // J  
....................                          0x7F, 0x08, 0x14, 0x22, 0x41, // K  
....................                          0x7F, 0x40, 0x40, 0x40, 0x40, // L  
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M  
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N  
....................                          0x3E, 0x41, 0x41, 0x41, 0x3E, // O  
....................                          0x7F, 0x09, 0x09, 0x09, 0x06, // P  
....................                          0x1E, 0x21, 0x21, 0x21, 0x5E, // Q  
....................                          0x7F, 0x09, 0x09, 0x09, 0x76};// R  
....................   
.................... const int8 FONT2[44][5]={0x26, 0x49, 0x49, 0x49, 0x32, // S  
....................                          0x01, 0x01, 0x7F, 0x01, 0x01, // T  
....................                          0x3F, 0x40, 0x40, 0x40, 0x3F, // U  
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V  
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W  
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X  
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y  
....................                          0x61, 0x51, 0x49, 0x45, 0x43, // Z  
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [  
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \  
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ]  
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^  
....................                          0x40, 0x40, 0x40, 0x40, 0x40, // _  
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // `  
....................                          0x20, 0x54, 0x54, 0x54, 0x78, // a  
....................                          0x7F, 0x44, 0x44, 0x44, 0x38, // b  
....................                          0x38, 0x44, 0x44, 0x44, 0x44, // c  
....................                          0x38, 0x44, 0x44, 0x44, 0x7F, // d  
....................                          0x38, 0x54, 0x54, 0x54, 0x18, // e  
....................                          0x04, 0x04, 0x7E, 0x05, 0x05, // f  
....................                          0x08, 0x54, 0x54, 0x54, 0x3C, // g  
....................                          0x7F, 0x08, 0x04, 0x04, 0x78, // h  
....................                          0x00, 0x44, 0x7D, 0x40, 0x00, // i  
....................                          0x20, 0x40, 0x44, 0x3D, 0x00, // j  
....................                          0x7F, 0x10, 0x28, 0x44, 0x00, // k  
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l  
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m  
....................                          0x7C, 0x08, 0x04, 0x04, 0x78, // n  
....................                          0x38, 0x44, 0x44, 0x44, 0x38, // o  
....................                          0x7C, 0x14, 0x14, 0x14, 0x08, // p  
....................                          0x08, 0x14, 0x14, 0x14, 0x7C, // q  
....................                          0x00, 0x7C, 0x08, 0x04, 0x04, // r  
....................                          0x48, 0x54, 0x54, 0x54, 0x20, // s  
....................                          0x04, 0x04, 0x3F, 0x44, 0x44, // t  
....................                          0x3C, 0x40, 0x40, 0x20, 0x7C, // u  
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v  
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w  
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x  
....................                          0x0C, 0x50, 0x50, 0x50, 0x3C, // y  
....................                          0x44, 0x64, 0x54, 0x4C, 0x44, // z  
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // {  
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // |  
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // }  
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~  
.................... /////////////////////////////////////////////////////////////////////////  
....................   
....................   
.................... /////////////////////////////////////////////////////////////////////////  
.................... // Purpose:       Draw a line on a graphic LCD using Bresenham's  
.................... //                line drawing algorithm  
.................... // Inputs:        (x1, y1) - the start coordinate  
.................... //                (x2, y2) - the end coordinate  
.................... //                color - ON or OFF  
.................... // Dependencies:  glcd_pixel()  
.................... /////////////////////////////////////////////////////////////////////////  
.................... #ifdef LARGE_LCD  
.................... void glcd_line(int16 x1, int16 y1, int16 x2, int16 y2, int1 color)  
.................... #else  
.................... void glcd_line(int8 x1, int8 y1, int8 x2, int8 y2, int1 color)  
.................... #endif  
.................... {  
....................    int16        dy, dx;  
....................    signed int8  addx=1, addy=1;  
*
093C:  MOVLW  01
093E:  MOVLB  4
0940:  MOVWF  xCA
0942:  MOVWF  xCB
....................    signed int16 P, diff;  
....................   
....................    #ifdef LARGE_LCD  
....................    int16 i=0;  
0944:  CLRF   xD0
0946:  CLRF   xD1
....................    dx = abs((signed int16)(x2 - x1));  
0948:  MOVF   xBD,W
094A:  SUBWF  xC1,W
094C:  MOVWF  00
094E:  MOVF   xBE,W
0950:  SUBWFB xC2,W
0952:  MOVWF  03
0954:  MOVFF  00,4D2
0958:  MOVFF  03,4D3
095C:  MOVFF  03,03
0960:  MOVF   00,W
0962:  BTFSS  xD3.7
0964:  BRA    0976
0966:  MOVLW  00
0968:  BSF    FD8.0
096A:  SUBFWB xD2,W
096C:  MOVWF  00
096E:  MOVLW  00
0970:  SUBFWB xD3,W
0972:  MOVWF  03
0974:  MOVF   00,W
0976:  MOVWF  xC8
0978:  MOVFF  03,4C9
....................    dy = abs((signed int16)(y2 - y1));  
097C:  MOVF   xBF,W
097E:  SUBWF  xC3,W
0980:  MOVWF  00
0982:  MOVF   xC0,W
0984:  SUBWFB xC4,W
0986:  MOVWF  03
0988:  MOVFF  00,4D2
098C:  MOVFF  03,4D3
0990:  MOVFF  03,03
0994:  MOVF   00,W
0996:  BTFSS  xD3.7
0998:  BRA    09AA
099A:  MOVLW  00
099C:  BSF    FD8.0
099E:  SUBFWB xD2,W
09A0:  MOVWF  00
09A2:  MOVLW  00
09A4:  SUBFWB xD3,W
09A6:  MOVWF  03
09A8:  MOVF   00,W
09AA:  MOVWF  xC6
09AC:  MOVFF  03,4C7
....................    #else  
....................    int8 i=0;  
....................    dx = abs((signed int8)(x2 - x1));  
....................    dy = abs((signed int8)(y2 - y1));  
....................    #endif  
....................   
....................    if(x1 > x2)  
09B0:  MOVF   xC2,W
09B2:  SUBWF  xBE,W
09B4:  BNC   09C2
09B6:  BNZ   09BE
09B8:  MOVF   xBD,W
09BA:  SUBWF  xC1,W
09BC:  BC    09C2
....................       addx = -1;  
09BE:  MOVLW  FF
09C0:  MOVWF  xCA
....................    if(y1 > y2)  
09C2:  MOVF   xC4,W
09C4:  SUBWF  xC0,W
09C6:  BNC   09D4
09C8:  BNZ   09D0
09CA:  MOVF   xBF,W
09CC:  SUBWF  xC3,W
09CE:  BC    09D4
....................       addy = -1;  
09D0:  MOVLW  FF
09D2:  MOVWF  xCB
....................   
....................    if(dx >= dy)  
09D4:  MOVF   xC7,W
09D6:  SUBWF  xC9,W
09D8:  BNC   0AA0
09DA:  BNZ   09E2
09DC:  MOVF   xC6,W
09DE:  SUBWF  xC8,W
09E0:  BNC   0AA0
....................    {  
....................       dy *= 2;  
09E2:  BCF    FD8.0
09E4:  RLCF   xC6,F
09E6:  RLCF   xC7,F
....................       P = dy - dx;  
09E8:  MOVF   xC8,W
09EA:  SUBWF  xC6,W
09EC:  MOVWF  00
09EE:  MOVF   xC9,W
09F0:  SUBWFB xC7,W
09F2:  MOVWF  03
09F4:  MOVFF  00,4CC
09F8:  MOVFF  03,4CD
....................       diff = P - dx;  
09FC:  MOVF   xC8,W
09FE:  SUBWF  xCC,W
0A00:  MOVWF  xCE
0A02:  MOVF   xC9,W
0A04:  SUBWFB xCD,W
0A06:  MOVWF  xCF
....................   
....................       for(; i<=dx; ++i)  
0A08:  MOVF   xD1,W
0A0A:  SUBWF  xC9,W
0A0C:  BNC   0A9E
0A0E:  BNZ   0A16
0A10:  MOVF   xD0,W
0A12:  SUBWF  xC8,W
0A14:  BNC   0A9E
....................       {  
....................          glcd_pixel(x1, y1, color);  
0A16:  MOVFF  4BE,4D3
0A1A:  MOVFF  4BD,4D2
0A1E:  MOVFF  4C0,4D5
0A22:  MOVFF  4BF,4D4
0A26:  MOVFF  4C5,4D6
0A2A:  MOVLB  0
0A2C:  RCALL  0870
....................   
....................          if(P < 0)  
0A2E:  MOVLB  4
0A30:  BTFSC  xCD.7
0A32:  BRA    0A36
0A34:  BRA    0A5A
....................          {  
....................             P  += dy;  
0A36:  MOVF   xC6,W
0A38:  ADDWF  xCC,F
0A3A:  MOVF   xC7,W
0A3C:  ADDWFC xCD,F
....................             x1 += addx;  
0A3E:  CLRF   03
0A40:  MOVF   xCA,W
0A42:  MOVWF  00
0A44:  BTFSC  00.7
0A46:  DECF   03,F
0A48:  ADDWF  xBD,W
0A4A:  MOVWF  01
0A4C:  MOVF   xBE,W
0A4E:  ADDWFC 03,F
0A50:  MOVFF  01,4BD
0A54:  MOVFF  03,4BE
....................          }  
....................          else  
0A58:  BRA    0A96
....................          {  
....................             P  += diff;  
0A5A:  MOVF   xCE,W
0A5C:  ADDWF  xCC,F
0A5E:  MOVF   xCF,W
0A60:  ADDWFC xCD,F
....................             x1 += addx;  
0A62:  CLRF   03
0A64:  MOVF   xCA,W
0A66:  MOVWF  00
0A68:  BTFSC  00.7
0A6A:  DECF   03,F
0A6C:  ADDWF  xBD,W
0A6E:  MOVWF  01
0A70:  MOVF   xBE,W
0A72:  ADDWFC 03,F
0A74:  MOVFF  01,4BD
0A78:  MOVFF  03,4BE
....................             y1 += addy;  
0A7C:  CLRF   03
0A7E:  MOVF   xCB,W
0A80:  MOVWF  00
0A82:  BTFSC  00.7
0A84:  DECF   03,F
0A86:  ADDWF  xBF,W
0A88:  MOVWF  01
0A8A:  MOVF   xC0,W
0A8C:  ADDWFC 03,F
0A8E:  MOVFF  01,4BF
0A92:  MOVFF  03,4C0
....................          }  
....................       }  
0A96:  INCF   xD0,F
0A98:  BTFSC  FD8.2
0A9A:  INCF   xD1,F
0A9C:  BRA    0A08
....................    }  
....................    else  
0A9E:  BRA    0B5C
....................    {  
....................       dx *= 2;  
0AA0:  BCF    FD8.0
0AA2:  RLCF   xC8,F
0AA4:  RLCF   xC9,F
....................       P = dx - dy;  
0AA6:  MOVF   xC6,W
0AA8:  SUBWF  xC8,W
0AAA:  MOVWF  00
0AAC:  MOVF   xC7,W
0AAE:  SUBWFB xC9,W
0AB0:  MOVWF  03
0AB2:  MOVFF  00,4CC
0AB6:  MOVFF  03,4CD
....................       diff = P - dy;  
0ABA:  MOVF   xC6,W
0ABC:  SUBWF  xCC,W
0ABE:  MOVWF  xCE
0AC0:  MOVF   xC7,W
0AC2:  SUBWFB xCD,W
0AC4:  MOVWF  xCF
....................   
....................       for(; i<=dy; ++i)  
0AC6:  MOVF   xD1,W
0AC8:  SUBWF  xC7,W
0ACA:  BNC   0B5C
0ACC:  BNZ   0AD4
0ACE:  MOVF   xD0,W
0AD0:  SUBWF  xC6,W
0AD2:  BNC   0B5C
....................       {  
....................          glcd_pixel(x1, y1, color);  
0AD4:  MOVFF  4BE,4D3
0AD8:  MOVFF  4BD,4D2
0ADC:  MOVFF  4C0,4D5
0AE0:  MOVFF  4BF,4D4
0AE4:  MOVFF  4C5,4D6
0AE8:  MOVLB  0
0AEA:  RCALL  0870
....................   
....................          if(P < 0)  
0AEC:  MOVLB  4
0AEE:  BTFSC  xCD.7
0AF0:  BRA    0AF4
0AF2:  BRA    0B18
....................          {  
....................             P  += dx;  
0AF4:  MOVF   xC8,W
0AF6:  ADDWF  xCC,F
0AF8:  MOVF   xC9,W
0AFA:  ADDWFC xCD,F
....................             y1 += addy;  
0AFC:  CLRF   03
0AFE:  MOVF   xCB,W
0B00:  MOVWF  00
0B02:  BTFSC  00.7
0B04:  DECF   03,F
0B06:  ADDWF  xBF,W
0B08:  MOVWF  01
0B0A:  MOVF   xC0,W
0B0C:  ADDWFC 03,F
0B0E:  MOVFF  01,4BF
0B12:  MOVFF  03,4C0
....................          }  
....................          else  
0B16:  BRA    0B54
....................          {  
....................             P  += diff;  
0B18:  MOVF   xCE,W
0B1A:  ADDWF  xCC,F
0B1C:  MOVF   xCF,W
0B1E:  ADDWFC xCD,F
....................             x1 += addx;  
0B20:  CLRF   03
0B22:  MOVF   xCA,W
0B24:  MOVWF  00
0B26:  BTFSC  00.7
0B28:  DECF   03,F
0B2A:  ADDWF  xBD,W
0B2C:  MOVWF  01
0B2E:  MOVF   xBE,W
0B30:  ADDWFC 03,F
0B32:  MOVFF  01,4BD
0B36:  MOVFF  03,4BE
....................             y1 += addy;  
0B3A:  CLRF   03
0B3C:  MOVF   xCB,W
0B3E:  MOVWF  00
0B40:  BTFSC  00.7
0B42:  DECF   03,F
0B44:  ADDWF  xBF,W
0B46:  MOVWF  01
0B48:  MOVF   xC0,W
0B4A:  ADDWFC 03,F
0B4C:  MOVFF  01,4BF
0B50:  MOVFF  03,4C0
....................          }  
....................       }  
0B54:  INCF   xD0,F
0B56:  BTFSC  FD8.2
0B58:  INCF   xD1,F
0B5A:  BRA    0AC6
....................    }  
.................... }  
0B5C:  MOVLB  0
0B5E:  RETLW  00
....................   
....................   
.................... /////////////////////////////////////////////////////////////////////////  
.................... // Purpose:       Draw a rectangle on a graphic LCD  
.................... // Inputs:        (x1, y1) - the start coordinate  
.................... //                (x2, y2) - the end coordinate  
.................... //                fill  - YES or NO  
.................... //                color - ON or OFF  
.................... // Dependencies:  glcd_pixel(), glcd_line()  
.................... /////////////////////////////////////////////////////////////////////////  
.................... #ifdef LARGE_LCD  
.................... void glcd_rect(int16 x1, int16 y1, int16 x2, int16 y2, int1 fill, int1 color)  
.................... #else  
.................... void glcd_rect(int8 x1, int8 y1, int8 x2, int8 y2, int1 fill, int1 color)  
.................... #endif  
.................... {  
....................    if(fill)  
*
1060:  MOVLB  4
1062:  MOVF   xB1,F
1064:  BZ    1118
....................    {  
....................       #ifdef LARGE_LCD  
....................       int16 i, xmin, xmax, ymin, ymax;  
....................       #else  
....................       int8  i, xmin, xmax, ymin, ymax;  
....................       #endif  
....................   
....................       if(x1 < x2)                            //  Find x min and max  
1066:  MOVF   xAA,W
1068:  SUBWF  xAE,W
106A:  BNC   1086
106C:  BNZ   1074
106E:  MOVF   xAD,W
1070:  SUBWF  xA9,W
1072:  BC    1086
....................       {  
....................          xmin = x1;  
1074:  MOVFF  4AA,4B6
1078:  MOVFF  4A9,4B5
....................          xmax = x2;  
107C:  MOVFF  4AE,4B8
1080:  MOVFF  4AD,4B7
....................       }  
....................       else  
1084:  BRA    1096
....................       {  
....................          xmin = x2;  
1086:  MOVFF  4AE,4B6
108A:  MOVFF  4AD,4B5
....................          xmax = x1;  
108E:  MOVFF  4AA,4B8
1092:  MOVFF  4A9,4B7
....................       }  
....................   
....................       if(y1 < y2)                            // Find the y min and max  
1096:  MOVF   xAC,W
1098:  SUBWF  xB0,W
109A:  BNC   10B6
109C:  BNZ   10A4
109E:  MOVF   xAF,W
10A0:  SUBWF  xAB,W
10A2:  BC    10B6
....................       {  
....................          ymin = y1;  
10A4:  MOVFF  4AC,4BA
10A8:  MOVFF  4AB,4B9
....................          ymax = y2;  
10AC:  MOVFF  4B0,4BC
10B0:  MOVFF  4AF,4BB
....................       }  
....................       else  
10B4:  BRA    10C6
....................       {  
....................          ymin = y2;  
10B6:  MOVFF  4B0,4BA
10BA:  MOVFF  4AF,4B9
....................          ymax = y1;  
10BE:  MOVFF  4AC,4BC
10C2:  MOVFF  4AB,4BB
....................       }  
....................   
....................       for(; xmin <= xmax; ++xmin)  
10C6:  MOVF   xB6,W
10C8:  SUBWF  xB8,W
10CA:  BNC   1116
10CC:  BNZ   10D4
10CE:  MOVF   xB5,W
10D0:  SUBWF  xB7,W
10D2:  BNC   1116
....................       {  
....................          for(i=ymin; i<=ymax; ++i)  
10D4:  MOVFF  4BA,4B4
10D8:  MOVFF  4B9,4B3
10DC:  MOVF   xB4,W
10DE:  SUBWF  xBC,W
10E0:  BNC   110E
10E2:  BNZ   10EA
10E4:  MOVF   xB3,W
10E6:  SUBWF  xBB,W
10E8:  BNC   110E
....................          {  
....................             glcd_pixel(xmin, i, color);  
10EA:  MOVFF  4B6,4D3
10EE:  MOVFF  4B5,4D2
10F2:  MOVFF  4B4,4D5
10F6:  MOVFF  4B3,4D4
10FA:  MOVFF  4B2,4D6
10FE:  MOVLB  0
1100:  CALL   0870
....................          }  
1104:  MOVLB  4
1106:  INCF   xB3,F
1108:  BTFSC  FD8.2
110A:  INCF   xB4,F
110C:  BRA    10DC
....................       }  
110E:  INCF   xB5,F
1110:  BTFSC  FD8.2
1112:  INCF   xB6,F
1114:  BRA    10C6
....................    }  
....................    else  
1116:  BRA    11BC
....................    {  
....................       glcd_line(x1, y1, x2, y1, color);      // Draw the 4 sides  
1118:  MOVFF  4AA,4BE
111C:  MOVFF  4A9,4BD
1120:  MOVFF  4AC,4C0
1124:  MOVFF  4AB,4BF
1128:  MOVFF  4AE,4C2
112C:  MOVFF  4AD,4C1
1130:  MOVFF  4AC,4C4
1134:  MOVFF  4AB,4C3
1138:  MOVFF  4B2,4C5
113C:  MOVLB  0
113E:  CALL   093C
....................       glcd_line(x1, y2, x2, y2, color);  
1142:  MOVFF  4AA,4BE
1146:  MOVFF  4A9,4BD
114A:  MOVFF  4B0,4C0
114E:  MOVFF  4AF,4BF
1152:  MOVFF  4AE,4C2
1156:  MOVFF  4AD,4C1
115A:  MOVFF  4B0,4C4
115E:  MOVFF  4AF,4C3
1162:  MOVFF  4B2,4C5
1166:  CALL   093C
....................       glcd_line(x1, y1, x1, y2, color);  
116A:  MOVFF  4AA,4BE
116E:  MOVFF  4A9,4BD
1172:  MOVFF  4AC,4C0
1176:  MOVFF  4AB,4BF
117A:  MOVFF  4AA,4C2
117E:  MOVFF  4A9,4C1
1182:  MOVFF  4B0,4C4
1186:  MOVFF  4AF,4C3
118A:  MOVFF  4B2,4C5
118E:  CALL   093C
....................       glcd_line(x2, y1, x2, y2, color);  
1192:  MOVFF  4AE,4BE
1196:  MOVFF  4AD,4BD
119A:  MOVFF  4AC,4C0
119E:  MOVFF  4AB,4BF
11A2:  MOVFF  4AE,4C2
11A6:  MOVFF  4AD,4C1
11AA:  MOVFF  4B0,4C4
11AE:  MOVFF  4AF,4C3
11B2:  MOVFF  4B2,4C5
11B6:  CALL   093C
11BA:  MOVLB  4
....................    }  
.................... }  
11BC:  MOVLB  0
11BE:  RETLW  00
....................   
.................... /////////////////////////////////////////////////////////////////////////  
.................... // Purpose:       Draw a bar (wide line) on a graphic LCD  
.................... // Inputs:        (x1, y1) - the start coordinate  
.................... //                (x2, y2) - the end coordinate  
.................... //                width  - The number of pixels wide  
.................... //                color - ON or OFF  
.................... /////////////////////////////////////////////////////////////////////////  
.................... #ifdef LARGE_LCD  
.................... void glcd_bar(int16 x1, int16 y1, int16 x2, int16 y2, int8 width, int1 color)  
.................... #else  
.................... void glcd_bar(int8 x1, int8 y1, int8 x2, int8 y2, int8 width, int1 color)  
.................... #endif  
.................... {  
....................    int8         half_width;  
....................    signed int16 dy, dx;  
....................    signed int8  addx=1, addy=1, j;  
....................    signed int16 P, diff, c1, c2;  
....................   
....................    #ifdef LARGE_LCD  
....................    int16 i=0;  
....................    dx = abs((signed int16)(x2 - x1));  
....................    dy = abs((signed int16)(y2 - y1));  
....................    #else  
....................    int8 i=0;  
....................    dx = abs((signed int8)(x2 - x1));  
....................    dy = abs((signed int8)(y2 - y1));  
....................    #endif  
....................   
....................    half_width = width/2;  
....................    c1 = -(dx*x1 + dy*y1);  
....................    c2 = -(dx*x2 + dy*y2);  
....................   
....................    if(x1 > x2)  
....................    {  
....................       signed int16 temp;  
....................       temp = c1;  
....................       c1 = c2;  
....................       c2 = temp;  
....................       addx = -1;  
....................    }  
....................    if(y1 > y2)  
....................    {  
....................       signed int16 temp;  
....................       temp = c1;  
....................       c1 = c2;  
....................       c2 = temp;  
....................       addy = -1;  
....................    }  
....................   
....................    if(dx >= dy)  
....................    {  
....................       P = 2*dy - dx;  
....................       diff = P - dx;  
....................   
....................       for(i=0; i<=dx; ++i)  
....................       {  
....................          for(j=-half_width; j<half_width+width%2; ++j)  
....................          {  
....................             #ifdef LARGE_LCD  
....................             int16 temp;  
....................             #else  
....................             int8 temp;  
....................             #endif  
....................   
....................             temp = dx*x1+dy*(y1+j);    // Use more RAM to increase speed  
....................             if(temp+c1 >= 0 && temp+c2 <=0)  
....................                glcd_pixel(x1, y1+j, color);  
....................          }  
....................          if(P < 0)  
....................          {  
....................             P  += 2*dy;  
....................             x1 += addx;  
....................          }  
....................          else  
....................          {  
....................             P  += diff;  
....................             x1 += addx;  
....................             y1 += addy;  
....................          }  
....................       }  
....................    }  
....................    else  
....................    {  
....................       P = 2*dx - dy;  
....................       diff = P - dy;  
....................   
....................       for(i=0; i<=dy; ++i)  
....................       {  
....................          if(P < 0)  
....................          {  
....................             P  += 2*dx;  
....................             y1 += addy;  
....................          }  
....................          else  
....................          {  
....................             P  += diff;  
....................             x1 += addx;  
....................             y1 += addy;  
....................          }  
....................          for(j=-half_width; j<half_width+width%2; ++j)  
....................          {  
....................             #ifdef LARGE_LCD  
....................             int16 temp;  
....................             #else  
....................             int8 temp;  
....................             #endif  
....................   
....................             temp = dx*x1+dy*(y1+j);    // Use more RAM to increase speed  
....................             if(temp+c1 >= 0 && temp+c2 <=0)  
....................                glcd_pixel(x1+j, y1, color);  
....................          }  
....................       }  
....................    }  
.................... }  
....................   
....................   
.................... /////////////////////////////////////////////////////////////////////////  
.................... // Purpose:       Draw a circle on a graphic LCD  
.................... // Inputs:        (x,y) - the center of the circle  
.................... //                radius - the radius of the circle  
.................... //                fill - YES or NO  
.................... //                color - ON or OFF  
.................... /////////////////////////////////////////////////////////////////////////  
.................... #ifdef LARGE_LCD  
.................... void glcd_circle(int16 x, int16 y, int16 radius, int1 fill, int1 color)  
.................... #else  
.................... void glcd_circle(int8 x, int8 y, int8 radius, int1 fill, int1 color)  
.................... #endif  
.................... {  
....................    #ifdef LARGE_LCD  
....................    signed int16 a, b, P;  
....................    #else  
....................    signed int8  a, b, P;  
....................    #endif  
....................   
....................    a = 0;  
....................    b = radius;  
....................    P = 1 - radius;  
....................   
....................    do  
....................    {  
....................       if(fill)  
....................       {  
....................          glcd_line(x-a, y+b, x+a, y+b, color);  
....................          glcd_line(x-a, y-b, x+a, y-b, color);  
....................          glcd_line(x-b, y+a, x+b, y+a, color);  
....................          glcd_line(x-b, y-a, x+b, y-a, color);  
....................       }  
....................       else  
....................       {  
....................          glcd_pixel(a+x, b+y, color);  
....................          glcd_pixel(b+x, a+y, color);  
....................          glcd_pixel(x-a, b+y, color);  
....................          glcd_pixel(x-b, a+y, color);  
....................          glcd_pixel(b+x, y-a, color);  
....................          glcd_pixel(a+x, y-b, color);  
....................          glcd_pixel(x-a, y-b, color);  
....................          glcd_pixel(x-b, y-a, color);  
....................       }  
....................   
....................       if(P < 0)  
....................          P += 3 + 2 * a++;  
....................       else  
....................          P += 5 + 2 * (a++ - b--);  
....................     } while(a <= b);  
.................... }  
....................   
....................   
.................... /////////////////////////////////////////////////////////////////////////  
.................... // Purpose:       Write text on a graphic LCD  
.................... // Inputs:        (x,y) - The upper left coordinate of the first letter  
.................... //                textptr - A pointer to an array of text to display  
.................... //                size - The size of the text: 1 = 5x7, 2 = 10x14, ...  
.................... //                color - ON or OFF  
.................... /////////////////////////////////////////////////////////////////////////  
.................... #ifdef LARGE_LCD  
.................... void glcd_text57(int16 x, int16 y, char* textptr, int8 size, int1 color)  
.................... #else  
.................... void glcd_text57(int8 x, int8 y, char* textptr, int8 size, int1 color)  
.................... #endif  
.................... {  
....................    int8 j, k, l, m;                       // Loop counters  
....................    int8 pixelData[5];                     // Stores character data  
....................   
....................    for(; *textptr != '\0'; ++textptr, ++x)// Loop through the passed string  
*
0E42:  MOVFF  4B3,03
0E46:  MOVLB  4
0E48:  MOVFF  4B2,FE9
0E4C:  MOVFF  4B3,FEA
0E50:  MOVF   FEF,F
0E52:  BTFSC  FD8.2
0E54:  BRA    103C
....................    {  
....................       if(*textptr < 'S') // Checks if the letter is in the first font array  
0E56:  MOVFF  4B3,03
0E5A:  MOVFF  4B2,FE9
0E5E:  MOVFF  4B3,FEA
0E62:  MOVF   FEF,W
0E64:  SUBLW  52
0E66:  BNC   0EB6
....................          memcpy(pixelData, FONT[*textptr - ' '], 5);  
0E68:  MOVFF  4B3,03
0E6C:  MOVFF  4B2,FE9
0E70:  MOVFF  4B3,FEA
0E74:  MOVLW  20
0E76:  SUBWF  FEF,W
0E78:  MULLW  05
0E7A:  MOVF   FF3,W
0E7C:  CLRF   03
0E7E:  MOVWF  xC1
0E80:  MOVLW  04
0E82:  MOVWF  FEA
0E84:  MOVLW  BA
0E86:  MOVWF  FE9
0E88:  CLRF   xC5
0E8A:  MOVFF  4C1,4C4
0E8E:  MOVFF  FF2,4C2
0E92:  BCF    FF2.7
0E94:  MOVLW  05
0E96:  MOVWF  01
0E98:  CLRF   FF7
0E9A:  MOVF   xC1,W
0E9C:  MOVLB  0
0E9E:  CALL   0096
0EA2:  TBLRD*-
0EA4:  TBLRD*+
0EA6:  MOVFF  FF5,FEE
0EAA:  DECFSZ 01,F
0EAC:  BRA    0EA4
0EAE:  MOVLB  4
0EB0:  BTFSC  xC2.7
0EB2:  BSF    FF2.7
....................       else if(*textptr <= '~') // Check if the letter is in the second font array  
0EB4:  BRA    0F20
0EB6:  MOVFF  4B3,03
0EBA:  MOVFF  4B2,FE9
0EBE:  MOVFF  4B3,FEA
0EC2:  MOVF   FEF,W
0EC4:  SUBLW  7E
0EC6:  BNC   0F16
....................          memcpy(pixelData, FONT2[*textptr - 'S'], 5);  
0EC8:  MOVFF  4B3,03
0ECC:  MOVFF  4B2,FE9
0ED0:  MOVFF  4B3,FEA
0ED4:  MOVLW  53
0ED6:  SUBWF  FEF,W
0ED8:  MULLW  05
0EDA:  MOVF   FF3,W
0EDC:  CLRF   03
0EDE:  MOVWF  xC1
0EE0:  MOVLW  04
0EE2:  MOVWF  FEA
0EE4:  MOVLW  BA
0EE6:  MOVWF  FE9
0EE8:  CLRF   xC5
0EEA:  MOVFF  4C1,4C4
0EEE:  MOVFF  FF2,4C2
0EF2:  BCF    FF2.7
0EF4:  MOVLW  05
0EF6:  MOVWF  01
0EF8:  CLRF   FF7
0EFA:  MOVF   xC1,W
0EFC:  MOVLB  0
0EFE:  CALL   01B0
0F02:  TBLRD*-
0F04:  TBLRD*+
0F06:  MOVFF  FF5,FEE
0F0A:  DECFSZ 01,F
0F0C:  BRA    0F04
0F0E:  MOVLB  4
0F10:  BTFSC  xC2.7
0F12:  BSF    FF2.7
....................       else  
0F14:  BRA    0F20
....................          memcpy(pixelData, FONT[0], 5);   // Default to space  
0F16:  CLRF   xBA
0F18:  CLRF   xBB
0F1A:  CLRF   xBC
0F1C:  CLRF   xBD
0F1E:  CLRF   xBE
....................   
....................       // Handles newline and carriage returns  
....................       switch(*textptr)  
....................       {  
0F20:  MOVFF  4B3,03
0F24:  MOVFF  4B2,FE9
0F28:  MOVFF  4B3,FEA
0F2C:  MOVF   FEF,W
0F2E:  XORLW  0A
0F30:  MOVLB  0
0F32:  BZ    0F3A
0F34:  XORLW  07
0F36:  BZ    0F4E
0F38:  BRA    0F56
....................          case '\n':  
....................             y += 7*size + 1;  
0F3A:  MOVLB  4
0F3C:  MOVF   xB4,W
0F3E:  MULLW  07
0F40:  MOVF   FF3,W
0F42:  ADDLW  01
0F44:  ADDWF  xB0,F
0F46:  MOVLW  00
0F48:  ADDWFC xB1,F
....................             continue;  
0F4A:  BRA    102A
0F4C:  MOVLB  0
....................          case '\r':  
....................             x = 0;  
0F4E:  MOVLB  4
0F50:  CLRF   xAF
0F52:  CLRF   xAE
....................             continue;  
0F54:  BRA    102A
....................       }  
....................   
....................       if(x+5*size >= GLCD_WIDTH)          // Performs character wrapping  
0F56:  MOVLB  4
0F58:  MOVF   xB4,W
0F5A:  MULLW  05
0F5C:  MOVF   FF3,W
0F5E:  ADDWF  xAE,W
0F60:  MOVWF  xBF
0F62:  MOVLW  00
0F64:  ADDWFC xAF,W
0F66:  MOVWF  xC0
0F68:  SUBLW  00
0F6A:  BC    0F88
0F6C:  XORLW  FF
0F6E:  BNZ   0F76
0F70:  MOVF   xBF,W
0F72:  SUBLW  3F
0F74:  BC    0F88
....................       {  
....................          x = 0;                           // Set x at far left position  
0F76:  CLRF   xAF
0F78:  CLRF   xAE
....................          y += 7*size + 1;                 // Set y at next position down  
0F7A:  MOVF   xB4,W
0F7C:  MULLW  07
0F7E:  MOVF   FF3,W
0F80:  ADDLW  01
0F82:  ADDWF  xB0,F
0F84:  MOVLW  00
0F86:  ADDWFC xB1,F
....................       }  
....................       for(j=0; j<5; ++j, x+=size)         // Loop through character byte data  
0F88:  CLRF   xB6
0F8A:  MOVF   xB6,W
0F8C:  SUBLW  04
0F8E:  BNC   102A
....................       {  
....................          for(k=0; k < 7; ++k)             // Loop through the vertical pixels  
0F90:  CLRF   xB7
0F92:  MOVF   xB7,W
0F94:  SUBLW  06
0F96:  BNC   101E
....................          {  
....................             if(bit_test(pixelData[j], k)) // Check if the pixel should be set  
0F98:  CLRF   03
0F9A:  MOVF   xB6,W
0F9C:  ADDLW  BA
0F9E:  MOVWF  FE9
0FA0:  MOVLW  04
0FA2:  ADDWFC 03,W
0FA4:  MOVWF  FEA
0FA6:  MOVFF  FEF,4BF
0FAA:  MOVFF  4BF,00
0FAE:  MOVF   xB7,W
0FB0:  MOVWF  01
0FB2:  BZ    0FBC
0FB4:  BCF    FD8.0
0FB6:  RRCF   00,F
0FB8:  DECFSZ 01,F
0FBA:  BRA    0FB4
0FBC:  BTFSS  00.0
0FBE:  BRA    101A
....................             {  
....................                for(l=0; l < size; ++l)    // These two loops change the  
0FC0:  CLRF   xB8
0FC2:  MOVF   xB4,W
0FC4:  SUBWF  xB8,W
0FC6:  BC    101A
....................                {                          // character's size  
....................                   for(m=0; m < size; ++m)  
0FC8:  CLRF   xB9
0FCA:  MOVF   xB4,W
0FCC:  SUBWF  xB9,W
0FCE:  BC    1016
....................                   {  
....................                      glcd_pixel(x+m, y+k*size+l, color); // Draws the pixel  
0FD0:  MOVF   xB9,W
0FD2:  ADDWF  xAE,W
0FD4:  MOVWF  xBF
0FD6:  MOVLW  00
0FD8:  ADDWFC xAF,W
0FDA:  MOVWF  xC0
0FDC:  MOVF   xB7,W
0FDE:  MULWF  xB4
0FE0:  MOVF   FF3,W
0FE2:  ADDWF  xB0,W
0FE4:  MOVWF  xC1
0FE6:  MOVLW  00
0FE8:  ADDWFC xB1,W
0FEA:  MOVWF  xC2
0FEC:  MOVF   xB8,W
0FEE:  ADDWF  xC1,W
0FF0:  MOVWF  xC3
0FF2:  MOVLW  00
0FF4:  ADDWFC xC2,W
0FF6:  MOVWF  xC4
0FF8:  MOVFF  4C0,4D3
0FFC:  MOVFF  4BF,4D2
1000:  MOVFF  4C4,4D5
1004:  MOVFF  4C3,4D4
1008:  MOVFF  4B5,4D6
100C:  MOVLB  0
100E:  RCALL  0870
....................                   }  
1010:  MOVLB  4
1012:  INCF   xB9,F
1014:  BRA    0FCA
....................                }  
1016:  INCF   xB8,F
1018:  BRA    0FC2
....................             }  
....................          }  
101A:  INCF   xB7,F
101C:  BRA    0F92
....................       }  
101E:  INCF   xB6,F
1020:  MOVF   xB4,W
1022:  ADDWF  xAE,F
1024:  MOVLW  00
1026:  ADDWFC xAF,F
1028:  BRA    0F8A
....................    }  
102A:  INCF   xB2,F
102C:  BTFSC  FD8.2
102E:  INCF   xB3,F
1030:  INCF   xAE,F
1032:  BTFSC  FD8.2
1034:  INCF   xAF,F
1036:  MOVLB  0
1038:  BRA    0E42
103A:  MOVLB  4
.................... }  
103C:  MOVLB  0
103E:  RETLW  00
....................   
.................... #endif  
....................  
....................   
.................... CHAR CURS[]="#";  
.................... CHAR TEMP[50];  
.................... const int Persistenza=30;  
.................... signed long Iin=2048;  
.................... signed long Qin=2048;  
.................... signed long gain=50;  
.................... long Ioff=2071;  
.................... long Qoff=2087;  
.................... float BATTERY_LEVEL=0;  
.................... int n=0;  
.................... int MEDIA=15;  
.................... long BATTERY_INDICATOR;  
.................... long GAIN_INDICATOR;  
.................... long GAIN_TEXT_INDICATOR;  
.................... int1 RS232_FLAG=0;  
.................... int1 BATTERY_EXHAUSTED=0;  
.................... int1 DISPLAY_MODE=0; // 0=TEMPO, 1=FASORE;  
.................... signed long i,j,x[Persistenza+1],y[Persistenza+1];  
.................... signed long It[240],Qt[240];  
.................... unsigned long tempo=0;  
....................   
.................... #include "XYPLOT_FIRM.c" 
....................  void cursore(int x, int y, int1 colore)  
.................... {  
....................    glcd_text57(x-2, y-4, curs, 1, colore);  
*
24E2:  MOVLW  02
24E4:  MOVLB  4
24E6:  SUBWF  xA9,W
24E8:  MOVWF  xAC
24EA:  MOVLW  04
24EC:  SUBWF  xAA,W
24EE:  MOVWF  xAD
24F0:  CLRF   xAF
24F2:  MOVFF  4AC,4AE
24F6:  CLRF   xB1
24F8:  MOVFF  4AD,4B0
24FC:  CLRF   xB3
24FE:  MOVLW  18
2500:  MOVWF  xB2
2502:  MOVLW  01
2504:  MOVWF  xB4
2506:  MOVFF  4AB,4B5
250A:  MOVLB  0
250C:  CALL   0E42
.................... }  
2510:  RETLW  00
....................   
.................... void griglia(void)  
.................... {  
....................   
....................    int i,j;  
....................   
....................    for(i=0;i<239;i+=24)  
*
0B60:  MOVLB  4
0B62:  CLRF   xA7
0B64:  MOVF   xA7,W
0B66:  SUBLW  EE
0B68:  BNC   0C20
....................    {  
....................       glcd_pixel(i,2,on);  
0B6A:  CLRF   xD3
0B6C:  MOVFF  4A7,4D2
0B70:  CLRF   xD5
0B72:  MOVLW  02
0B74:  MOVWF  xD4
0B76:  MOVLW  01
0B78:  MOVWF  xD6
0B7A:  MOVLB  0
0B7C:  RCALL  0870
....................       glcd_pixel(i,3,on);  
0B7E:  MOVLB  4
0B80:  CLRF   xD3
0B82:  MOVFF  4A7,4D2
0B86:  CLRF   xD5
0B88:  MOVLW  03
0B8A:  MOVWF  xD4
0B8C:  MOVLW  01
0B8E:  MOVWF  xD6
0B90:  MOVLB  0
0B92:  RCALL  0870
....................       glcd_pixel(i,237,on);  
0B94:  MOVLB  4
0B96:  CLRF   xD3
0B98:  MOVFF  4A7,4D2
0B9C:  CLRF   xD5
0B9E:  MOVLW  ED
0BA0:  MOVWF  xD4
0BA2:  MOVLW  01
0BA4:  MOVWF  xD6
0BA6:  MOVLB  0
0BA8:  RCALL  0870
....................       glcd_pixel(i,236,on);  
0BAA:  MOVLB  4
0BAC:  CLRF   xD3
0BAE:  MOVFF  4A7,4D2
0BB2:  CLRF   xD5
0BB4:  MOVLW  EC
0BB6:  MOVWF  xD4
0BB8:  MOVLW  01
0BBA:  MOVWF  xD6
0BBC:  MOVLB  0
0BBE:  RCALL  0870
....................       glcd_pixel(2,i,on);  
0BC0:  MOVLB  4
0BC2:  CLRF   xD3
0BC4:  MOVLW  02
0BC6:  MOVWF  xD2
0BC8:  CLRF   xD5
0BCA:  MOVFF  4A7,4D4
0BCE:  MOVLW  01
0BD0:  MOVWF  xD6
0BD2:  MOVLB  0
0BD4:  RCALL  0870
....................       glcd_pixel(3,i,on);  
0BD6:  MOVLB  4
0BD8:  CLRF   xD3
0BDA:  MOVLW  03
0BDC:  MOVWF  xD2
0BDE:  CLRF   xD5
0BE0:  MOVFF  4A7,4D4
0BE4:  MOVLW  01
0BE6:  MOVWF  xD6
0BE8:  MOVLB  0
0BEA:  RCALL  0870
....................       glcd_pixel(236,i,on);  
0BEC:  MOVLB  4
0BEE:  CLRF   xD3
0BF0:  MOVLW  EC
0BF2:  MOVWF  xD2
0BF4:  CLRF   xD5
0BF6:  MOVFF  4A7,4D4
0BFA:  MOVLW  01
0BFC:  MOVWF  xD6
0BFE:  MOVLB  0
0C00:  RCALL  0870
....................       glcd_pixel(237,i,on);  
0C02:  MOVLB  4
0C04:  CLRF   xD3
0C06:  MOVLW  ED
0C08:  MOVWF  xD2
0C0A:  CLRF   xD5
0C0C:  MOVFF  4A7,4D4
0C10:  MOVLW  01
0C12:  MOVWF  xD6
0C14:  MOVLB  0
0C16:  RCALL  0870
....................    }  
0C18:  MOVLW  18
0C1A:  MOVLB  4
0C1C:  ADDWF  xA7,F
0C1E:  BRA    0B64
....................   
....................    restart_wdt();  
0C20:  CLRWDT
....................   
....................    for(i=0;i<239;i+=24)  
0C22:  CLRF   xA7
0C24:  MOVF   xA7,W
0C26:  SUBLW  EE
0C28:  BNC   0C54
....................    {  
....................       for(j=0;j<239;j+=24)  
0C2A:  CLRF   xA8
0C2C:  MOVF   xA8,W
0C2E:  SUBLW  EE
0C30:  BNC   0C4E
....................       {  
....................   
....................          glcd_pixel(i,j,on);  
0C32:  CLRF   xD3
0C34:  MOVFF  4A7,4D2
0C38:  CLRF   xD5
0C3A:  MOVFF  4A8,4D4
0C3E:  MOVLW  01
0C40:  MOVWF  xD6
0C42:  MOVLB  0
0C44:  RCALL  0870
....................       }  
0C46:  MOVLW  18
0C48:  MOVLB  4
0C4A:  ADDWF  xA8,F
0C4C:  BRA    0C2C
....................    }  
0C4E:  MOVLW  18
0C50:  ADDWF  xA7,F
0C52:  BRA    0C24
....................   
....................   glcd_line(118, 120, 122, 120, on);  
0C54:  CLRF   xBE
0C56:  MOVLW  76
0C58:  MOVWF  xBD
0C5A:  CLRF   xC0
0C5C:  MOVLW  78
0C5E:  MOVWF  xBF
0C60:  CLRF   xC2
0C62:  MOVLW  7A
0C64:  MOVWF  xC1
0C66:  CLRF   xC4
0C68:  MOVLW  78
0C6A:  MOVWF  xC3
0C6C:  MOVLW  01
0C6E:  MOVWF  xC5
0C70:  MOVLB  0
0C72:  RCALL  093C
....................   glcd_line(120, 118, 120, 122, on);  
0C74:  MOVLB  4
0C76:  CLRF   xBE
0C78:  MOVLW  78
0C7A:  MOVWF  xBD
0C7C:  CLRF   xC0
0C7E:  MOVLW  76
0C80:  MOVWF  xBF
0C82:  CLRF   xC2
0C84:  MOVLW  78
0C86:  MOVWF  xC1
0C88:  CLRF   xC4
0C8A:  MOVLW  7A
0C8C:  MOVWF  xC3
0C8E:  MOVLW  01
0C90:  MOVWF  xC5
0C92:  MOVLB  0
0C94:  RCALL  093C
....................   
.................... }  
0C96:  RETLW  00
....................   
.................... void Rett(void)  
.................... {  
....................    int i,j;  
....................   
....................    glcd_line(0, 0, 319, 0, on);  
0C98:  MOVLB  4
0C9A:  CLRF   xBE
0C9C:  CLRF   xBD
0C9E:  CLRF   xC0
0CA0:  CLRF   xBF
0CA2:  MOVLW  01
0CA4:  MOVWF  xC2
0CA6:  MOVLW  3F
0CA8:  MOVWF  xC1
0CAA:  CLRF   xC4
0CAC:  CLRF   xC3
0CAE:  MOVLW  01
0CB0:  MOVWF  xC5
0CB2:  MOVLB  0
0CB4:  RCALL  093C
....................    glcd_line(0, 239, 319, 239, on);  
0CB6:  MOVLB  4
0CB8:  CLRF   xBE
0CBA:  CLRF   xBD
0CBC:  CLRF   xC0
0CBE:  MOVLW  EF
0CC0:  MOVWF  xBF
0CC2:  MOVLW  01
0CC4:  MOVWF  xC2
0CC6:  MOVLW  3F
0CC8:  MOVWF  xC1
0CCA:  CLRF   xC4
0CCC:  MOVLW  EF
0CCE:  MOVWF  xC3
0CD0:  MOVLW  01
0CD2:  MOVWF  xC5
0CD4:  MOVLB  0
0CD6:  RCALL  093C
....................    glcd_line(0, 0, 0, 239, on);  
0CD8:  MOVLB  4
0CDA:  CLRF   xBE
0CDC:  CLRF   xBD
0CDE:  CLRF   xC0
0CE0:  CLRF   xBF
0CE2:  CLRF   xC2
0CE4:  CLRF   xC1
0CE6:  CLRF   xC4
0CE8:  MOVLW  EF
0CEA:  MOVWF  xC3
0CEC:  MOVLW  01
0CEE:  MOVWF  xC5
0CF0:  MOVLB  0
0CF2:  RCALL  093C
....................    glcd_line(239, 0, 239, 239, on);  
0CF4:  MOVLB  4
0CF6:  CLRF   xBE
0CF8:  MOVLW  EF
0CFA:  MOVWF  xBD
0CFC:  CLRF   xC0
0CFE:  CLRF   xBF
0D00:  CLRF   xC2
0D02:  MOVWF  xC1
0D04:  CLRF   xC4
0D06:  MOVWF  xC3
0D08:  MOVLW  01
0D0A:  MOVWF  xC5
0D0C:  MOVLB  0
0D0E:  RCALL  093C
....................   
....................    glcd_line(1, 1, 239, 1, on);  
0D10:  MOVLB  4
0D12:  CLRF   xBE
0D14:  MOVLW  01
0D16:  MOVWF  xBD
0D18:  CLRF   xC0
0D1A:  MOVWF  xBF
0D1C:  CLRF   xC2
0D1E:  MOVLW  EF
0D20:  MOVWF  xC1
0D22:  CLRF   xC4
0D24:  MOVLW  01
0D26:  MOVWF  xC3
0D28:  MOVWF  xC5
0D2A:  MOVLB  0
0D2C:  RCALL  093C
....................    glcd_line(1, 238, 239, 238, on);  
0D2E:  MOVLB  4
0D30:  CLRF   xBE
0D32:  MOVLW  01
0D34:  MOVWF  xBD
0D36:  CLRF   xC0
0D38:  MOVLW  EE
0D3A:  MOVWF  xBF
0D3C:  CLRF   xC2
0D3E:  MOVLW  EF
0D40:  MOVWF  xC1
0D42:  CLRF   xC4
0D44:  MOVLW  EE
0D46:  MOVWF  xC3
0D48:  MOVLW  01
0D4A:  MOVWF  xC5
0D4C:  MOVLB  0
0D4E:  RCALL  093C
....................    glcd_line(1, 0, 1, 239, on);  
0D50:  MOVLB  4
0D52:  CLRF   xBE
0D54:  MOVLW  01
0D56:  MOVWF  xBD
0D58:  CLRF   xC0
0D5A:  CLRF   xBF
0D5C:  CLRF   xC2
0D5E:  MOVWF  xC1
0D60:  CLRF   xC4
0D62:  MOVLW  EF
0D64:  MOVWF  xC3
0D66:  MOVLW  01
0D68:  MOVWF  xC5
0D6A:  MOVLB  0
0D6C:  RCALL  093C
....................    glcd_line(238, 0, 238, 239, on);  
0D6E:  MOVLB  4
0D70:  CLRF   xBE
0D72:  MOVLW  EE
0D74:  MOVWF  xBD
0D76:  CLRF   xC0
0D78:  CLRF   xBF
0D7A:  CLRF   xC2
0D7C:  MOVWF  xC1
0D7E:  CLRF   xC4
0D80:  MOVLW  EF
0D82:  MOVWF  xC3
0D84:  MOVLW  01
0D86:  MOVWF  xC5
0D88:  MOVLB  0
0D8A:  RCALL  093C
....................      
....................    glcd_line(319, 0, 319, 239, on);  
0D8C:  MOVLW  01
0D8E:  MOVLB  4
0D90:  MOVWF  xBE
0D92:  MOVLW  3F
0D94:  MOVWF  xBD
0D96:  CLRF   xC0
0D98:  CLRF   xBF
0D9A:  MOVLW  01
0D9C:  MOVWF  xC2
0D9E:  MOVLW  3F
0DA0:  MOVWF  xC1
0DA2:  CLRF   xC4
0DA4:  MOVLW  EF
0DA6:  MOVWF  xC3
0DA8:  MOVLW  01
0DAA:  MOVWF  xC5
0DAC:  MOVLB  0
0DAE:  RCALL  093C
....................   
....................    glcd_line(240, 48, 319, 48, on);  
0DB0:  MOVLB  4
0DB2:  CLRF   xBE
0DB4:  MOVLW  F0
0DB6:  MOVWF  xBD
0DB8:  CLRF   xC0
0DBA:  MOVLW  30
0DBC:  MOVWF  xBF
0DBE:  MOVLW  01
0DC0:  MOVWF  xC2
0DC2:  MOVLW  3F
0DC4:  MOVWF  xC1
0DC6:  CLRF   xC4
0DC8:  MOVLW  30
0DCA:  MOVWF  xC3
0DCC:  MOVLW  01
0DCE:  MOVWF  xC5
0DD0:  MOVLB  0
0DD2:  RCALL  093C
....................    glcd_line(240, 96, 319, 96, on);  
0DD4:  MOVLB  4
0DD6:  CLRF   xBE
0DD8:  MOVLW  F0
0DDA:  MOVWF  xBD
0DDC:  CLRF   xC0
0DDE:  MOVLW  60
0DE0:  MOVWF  xBF
0DE2:  MOVLW  01
0DE4:  MOVWF  xC2
0DE6:  MOVLW  3F
0DE8:  MOVWF  xC1
0DEA:  CLRF   xC4
0DEC:  MOVLW  60
0DEE:  MOVWF  xC3
0DF0:  MOVLW  01
0DF2:  MOVWF  xC5
0DF4:  MOVLB  0
0DF6:  RCALL  093C
....................    glcd_line(240, 144, 319, 144, on);  
0DF8:  MOVLB  4
0DFA:  CLRF   xBE
0DFC:  MOVLW  F0
0DFE:  MOVWF  xBD
0E00:  CLRF   xC0
0E02:  MOVLW  90
0E04:  MOVWF  xBF
0E06:  MOVLW  01
0E08:  MOVWF  xC2
0E0A:  MOVLW  3F
0E0C:  MOVWF  xC1
0E0E:  CLRF   xC4
0E10:  MOVLW  90
0E12:  MOVWF  xC3
0E14:  MOVLW  01
0E16:  MOVWF  xC5
0E18:  MOVLB  0
0E1A:  RCALL  093C
....................    glcd_line(240, 192, 319, 192, on);  
0E1C:  MOVLB  4
0E1E:  CLRF   xBE
0E20:  MOVLW  F0
0E22:  MOVWF  xBD
0E24:  CLRF   xC0
0E26:  MOVLW  C0
0E28:  MOVWF  xBF
0E2A:  MOVLW  01
0E2C:  MOVWF  xC2
0E2E:  MOVLW  3F
0E30:  MOVWF  xC1
0E32:  CLRF   xC4
0E34:  MOVLW  C0
0E36:  MOVWF  xC3
0E38:  MOVLW  01
0E3A:  MOVWF  xC5
0E3C:  MOVLB  0
0E3E:  RCALL  093C
....................   
....................      
....................   
....................   
....................   
.................... }  
0E40:  RETLW  00
....................   
....................  
....................   
.................... #bit PLL_ENABLE=0xf9b.6  
....................   
.................... Batteria()  
.................... {  
....................    set_adc_channel(1);  
*
20BC:  MOVLW  04
20BE:  MOVWF  01
20C0:  MOVF   FC2,W
20C2:  ANDLW  C3
20C4:  IORWF  01,W
20C6:  MOVWF  FC2
....................   
....................    BATTERY_LEVEL=read_adc();  
20C8:  BSF    FC2.1
20CA:  BTFSC  FC2.1
20CC:  BRA    20CA
20CE:  MOVFF  FC4,4A8
20D2:  MOVFF  FC3,4A7
20D6:  MOVLB  0
20D8:  CALL   13C2
20DC:  MOVFF  03,59
20E0:  MOVFF  02,58
20E4:  MOVFF  01,57
20E8:  MOVFF  00,56
....................    BATTERY_LEVEL=BATTERY_LEVEL/65;  
20EC:  MOVFF  59,4AA
20F0:  MOVFF  58,4A9
20F4:  MOVFF  57,4A8
20F8:  MOVFF  56,4A7
20FC:  MOVLB  4
20FE:  CLRF   xAE
2100:  CLRF   xAD
2102:  MOVLW  02
2104:  MOVWF  xAC
2106:  MOVLW  85
2108:  MOVWF  xAB
210A:  MOVLB  0
210C:  BRA    1C60
210E:  MOVFF  03,59
2112:  MOVFF  02,58
2116:  MOVFF  01,57
211A:  MOVFF  00,56
....................   
....................    sprintf(temp,"%2.1fV",BATTERY_LEVEL);  
211E:  MOVLB  4
2120:  CLRF   xA6
2122:  MOVLW  1A
2124:  MOVWF  xA5
2126:  MOVFF  59,4AA
212A:  MOVFF  58,4A9
212E:  MOVFF  57,4A8
2132:  MOVFF  56,4A7
2136:  CLRF   xAE
2138:  CLRF   xAD
213A:  MOVLW  01
213C:  MOVWF  xAC
213E:  MOVWF  xAB
2140:  MOVLB  0
2142:  BRA    1DC4
2144:  MOVLW  56
2146:  MOVLB  4
2148:  MOVWF  xB9
214A:  MOVLB  0
214C:  CALL   1040
....................    glcd_rect(282, 217, 318, 227, on, off);  
2150:  MOVLW  01
2152:  MOVLB  4
2154:  MOVWF  xAA
2156:  MOVLW  1A
2158:  MOVWF  xA9
215A:  CLRF   xAC
215C:  MOVLW  D9
215E:  MOVWF  xAB
2160:  MOVLW  01
2162:  MOVWF  xAE
2164:  MOVLW  3E
2166:  MOVWF  xAD
2168:  CLRF   xB0
216A:  MOVLW  E3
216C:  MOVWF  xAF
216E:  MOVLW  01
2170:  MOVWF  xB1
2172:  CLRF   xB2
2174:  MOVLB  0
2176:  CALL   1060
....................    glcd_text57(282,217,temp , 1 , ON);  
217A:  MOVLW  01
217C:  MOVLB  4
217E:  MOVWF  xAF
2180:  MOVLW  1A
2182:  MOVWF  xAE
2184:  CLRF   xB1
2186:  MOVLW  D9
2188:  MOVWF  xB0
218A:  CLRF   xB3
218C:  MOVLW  1A
218E:  MOVWF  xB2
2190:  MOVLW  01
2192:  MOVWF  xB4
2194:  MOVWF  xB5
2196:  MOVLB  0
2198:  CALL   0E42
....................   
....................    BATTERY_INDICATOR=(BATTERY_LEVEL-10)*13;  
219C:  BSF    FD8.1
219E:  MOVFF  59,4B2
21A2:  MOVFF  58,4B1
21A6:  MOVFF  57,4B0
21AA:  MOVFF  56,4AF
21AE:  MOVLB  4
21B0:  CLRF   xB6
21B2:  CLRF   xB5
21B4:  MOVLW  20
21B6:  MOVWF  xB4
21B8:  MOVLW  82
21BA:  MOVWF  xB3
21BC:  MOVLB  0
21BE:  CALL   14F2
21C2:  MOVFF  00,4A7
21C6:  MOVFF  01,4A8
21CA:  MOVFF  02,4A9
21CE:  MOVFF  03,4AA
21D2:  MOVFF  03,4AE
21D6:  MOVFF  02,4AD
21DA:  MOVFF  01,4AC
21DE:  MOVFF  00,4AB
21E2:  MOVLB  4
21E4:  CLRF   xB2
21E6:  CLRF   xB1
21E8:  MOVLW  50
21EA:  MOVWF  xB0
21EC:  MOVLW  82
21EE:  MOVWF  xAF
21F0:  MOVLB  0
21F2:  CALL   13FA
21F6:  MOVFF  03,4B2
21FA:  MOVFF  02,4B1
21FE:  MOVFF  01,4B0
2202:  MOVFF  00,4AF
2206:  CALL   1770
220A:  MOVFF  02,5D
220E:  MOVFF  01,5C
....................   
.................... /*   glcd_rect(245, 215, 275, 225, off, on);  
....................    glcd_rect(246, 216, 246+BATTERY_INDICATOR, 224, on, on);  
....................    glcd_rect(276, 215, 280, 225, on, off);  
....................    glcd_rect(276, 218, 277, 222, on, on);  
.................... */  
....................    sprintf(temp,"Battery");  
2212:  MOVLB  4
2214:  CLRF   xA6
2216:  MOVLW  1A
2218:  MOVWF  xA5
221A:  CLRF   xA7
221C:  MOVF   xA7,W
221E:  MOVLB  0
2220:  CALL   02A6
2224:  MOVLB  4
2226:  INCF   xA7,F
2228:  MOVWF  00
222A:  MOVFF  00,4B9
222E:  MOVLB  0
2230:  CALL   1040
2234:  MOVLW  07
2236:  MOVLB  4
2238:  SUBWF  xA7,W
223A:  BNZ   221C
....................    glcd_text57(245,195,temp , 1 , ON);  
223C:  CLRF   xAF
223E:  MOVLW  F5
2240:  MOVWF  xAE
2242:  CLRF   xB1
2244:  MOVLW  C3
2246:  MOVWF  xB0
2248:  CLRF   xB3
224A:  MOVLW  1A
224C:  MOVWF  xB2
224E:  MOVLW  01
2250:  MOVWF  xB4
2252:  MOVWF  xB5
2254:  MOVLB  0
2256:  CALL   0E42
....................    sprintf(temp,"Level");  
225A:  MOVLB  4
225C:  CLRF   xA6
225E:  MOVLW  1A
2260:  MOVWF  xA5
2262:  CLRF   xA7
2264:  MOVF   xA7,W
2266:  MOVLB  0
2268:  CALL   02C8
226C:  MOVLB  4
226E:  INCF   xA7,F
2270:  MOVWF  00
2272:  MOVFF  00,4B9
2276:  MOVLB  0
2278:  CALL   1040
227C:  MOVLW  05
227E:  MOVLB  4
2280:  SUBWF  xA7,W
2282:  BNZ   2264
....................    glcd_text57(265,205,temp , 1 , ON);  
2284:  MOVLW  01
2286:  MOVWF  xAF
2288:  MOVLW  09
228A:  MOVWF  xAE
228C:  CLRF   xB1
228E:  MOVLW  CD
2290:  MOVWF  xB0
2292:  CLRF   xB3
2294:  MOVLW  1A
2296:  MOVWF  xB2
2298:  MOVLW  01
229A:  MOVWF  xB4
229C:  MOVWF  xB5
229E:  MOVLB  0
22A0:  CALL   0E42
....................   
....................    set_adc_channel(0);  
22A4:  MOVLW  00
22A6:  MOVWF  01
22A8:  MOVF   FC2,W
22AA:  ANDLW  C3
22AC:  IORWF  01,W
22AE:  MOVWF  FC2
.................... }  
22B0:  RETLW  00
....................   
....................   
.................... NULL_OFFSET()  
.................... {  
....................   
....................    Ioff=Iin;  
22B2:  MOVFF  4D,53
22B6:  MOVFF  4C,52
....................    Qoff=Qin;  
22BA:  MOVFF  4F,55
22BE:  MOVFF  4E,54
....................   
....................    strcpy(temp,"!");  
22C2:  CLRF   FEA
22C4:  MOVLW  1A
22C6:  MOVWF  FE9
22C8:  MOVFF  FF2,4A7
22CC:  BCF    FF2.7
22CE:  MOVLW  00
22D0:  CALL   02E8
22D4:  TBLRD*-
22D6:  TBLRD*+
22D8:  MOVF   FF5,W
22DA:  MOVWF  FEE
22DC:  IORLW  00
22DE:  BNZ   22D6
22E0:  MOVLB  4
22E2:  BTFSC  xA7.7
22E4:  BSF    FF2.7
....................    glcd_text57(100,90,temp , 8 , ON);  
22E6:  CLRF   xAF
22E8:  MOVLW  64
22EA:  MOVWF  xAE
22EC:  CLRF   xB1
22EE:  MOVLW  5A
22F0:  MOVWF  xB0
22F2:  CLRF   xB3
22F4:  MOVLW  1A
22F6:  MOVWF  xB2
22F8:  MOVLW  08
22FA:  MOVWF  xB4
22FC:  MOVLW  01
22FE:  MOVWF  xB5
2300:  MOVLB  0
2302:  CALL   0E42
....................    glcd_line(120, 70, 170 , 150, on);  
2306:  MOVLB  4
2308:  CLRF   xBE
230A:  MOVLW  78
230C:  MOVWF  xBD
230E:  CLRF   xC0
2310:  MOVLW  46
2312:  MOVWF  xBF
2314:  CLRF   xC2
2316:  MOVLW  AA
2318:  MOVWF  xC1
231A:  CLRF   xC4
231C:  MOVLW  96
231E:  MOVWF  xC3
2320:  MOVLW  01
2322:  MOVWF  xC5
2324:  MOVLB  0
2326:  CALL   093C
....................    glcd_line(120, 70, 70 , 150, on);  
232A:  MOVLB  4
232C:  CLRF   xBE
232E:  MOVLW  78
2330:  MOVWF  xBD
2332:  CLRF   xC0
2334:  MOVLW  46
2336:  MOVWF  xBF
2338:  CLRF   xC2
233A:  MOVWF  xC1
233C:  CLRF   xC4
233E:  MOVLW  96
2340:  MOVWF  xC3
2342:  MOVLW  01
2344:  MOVWF  xC5
2346:  MOVLB  0
2348:  CALL   093C
....................    glcd_line(70, 150, 170 , 150, on);  
234C:  MOVLB  4
234E:  CLRF   xBE
2350:  MOVLW  46
2352:  MOVWF  xBD
2354:  CLRF   xC0
2356:  MOVLW  96
2358:  MOVWF  xBF
235A:  CLRF   xC2
235C:  MOVLW  AA
235E:  MOVWF  xC1
2360:  CLRF   xC4
2362:  MOVLW  96
2364:  MOVWF  xC3
2366:  MOVLW  01
2368:  MOVWF  xC5
236A:  MOVLB  0
236C:  CALL   093C
....................    delay_ms(200);  
2370:  MOVLW  C8
2372:  MOVLB  4
2374:  MOVWF  xA8
2376:  MOVLB  0
2378:  CALL   11C0
....................    glcd_line(120, 70, 170, 150, off);  
237C:  MOVLB  4
237E:  CLRF   xBE
2380:  MOVLW  78
2382:  MOVWF  xBD
2384:  CLRF   xC0
2386:  MOVLW  46
2388:  MOVWF  xBF
238A:  CLRF   xC2
238C:  MOVLW  AA
238E:  MOVWF  xC1
2390:  CLRF   xC4
2392:  MOVLW  96
2394:  MOVWF  xC3
2396:  CLRF   xC5
2398:  MOVLB  0
239A:  CALL   093C
....................    glcd_line(120, 70, 70 , 150, off);  
239E:  MOVLB  4
23A0:  CLRF   xBE
23A2:  MOVLW  78
23A4:  MOVWF  xBD
23A6:  CLRF   xC0
23A8:  MOVLW  46
23AA:  MOVWF  xBF
23AC:  CLRF   xC2
23AE:  MOVWF  xC1
23B0:  CLRF   xC4
23B2:  MOVLW  96
23B4:  MOVWF  xC3
23B6:  CLRF   xC5
23B8:  MOVLB  0
23BA:  CALL   093C
....................    glcd_line(70, 150, 170 , 150, off);  
23BE:  MOVLB  4
23C0:  CLRF   xBE
23C2:  MOVLW  46
23C4:  MOVWF  xBD
23C6:  CLRF   xC0
23C8:  MOVLW  96
23CA:  MOVWF  xBF
23CC:  CLRF   xC2
23CE:  MOVLW  AA
23D0:  MOVWF  xC1
23D2:  CLRF   xC4
23D4:  MOVLW  96
23D6:  MOVWF  xC3
23D8:  CLRF   xC5
23DA:  MOVLB  0
23DC:  CALL   093C
....................    glcd_text57(100,90,temp , 8 , Off);  
23E0:  MOVLB  4
23E2:  CLRF   xAF
23E4:  MOVLW  64
23E6:  MOVWF  xAE
23E8:  CLRF   xB1
23EA:  MOVLW  5A
23EC:  MOVWF  xB0
23EE:  CLRF   xB3
23F0:  MOVLW  1A
23F2:  MOVWF  xB2
23F4:  MOVLW  08
23F6:  MOVWF  xB4
23F8:  CLRF   xB5
23FA:  MOVLB  0
23FC:  CALL   0E42
....................   
.................... }  
2400:  RETLW  00
....................   
....................   
.................... #int_rda  
.................... Leggi()  
.................... {  
....................   
....................    int Header,Imsb,Ilsb,Qmsb,Qlsb;  
....................   
....................    header=fgetc(RS232);  
*
04DE:  BTFSS  F9E.5
04E0:  BRA    04DE
04E2:  MOVFF  FAE,4E1
04E6:  MOVLB  4
....................    RS232_FLAG=1;  
04E8:  BSF    62.0
....................    if(Header==0xaa)  
04EA:  MOVF   xE1,W
04EC:  SUBLW  AA
04EE:  BNZ   052C
....................    {  
....................       restart_wdt();  
04F0:  CLRWDT
....................   
....................       Imsb=fgetc(rs232);  
04F2:  BTFSS  F9E.5
04F4:  BRA    04F2
04F6:  MOVFF  FAE,4E2
....................       Ilsb=fgetc(rs232);  
04FA:  BTFSS  F9E.5
04FC:  BRA    04FA
04FE:  MOVFF  FAE,4E3
....................       Qmsb=fgetc(rs232);  
0502:  BTFSS  F9E.5
0504:  BRA    0502
0506:  MOVFF  FAE,4E4
....................       Qlsb=fgetc(rs232);  
050A:  BTFSS  F9E.5
050C:  BRA    050A
050E:  MOVFF  FAE,4E5
....................   
....................       Iin=make16(Imsb,Ilsb);  
0512:  MOVFF  4E2,4D
0516:  MOVFF  4E3,4C
....................       Qin=make16(Qmsb,Qlsb);  
051A:  MOVFF  4E4,4F
051E:  MOVFF  4E5,4E
....................   
....................       tempo+=1;  
0522:  MOVLW  01
0524:  ADDWF  xA3,F
0526:  MOVLW  00
0528:  ADDWFC xA4,F
....................   
....................       RS232_FLAG=1;  
052A:  BSF    62.0
....................    }  
....................   
.................... }  
....................   
....................   
052C:  BCF    F9E.5
052E:  MOVLB  0
0530:  GOTO   0054
.................... SOPPRESSIONE()  
.................... {  
....................   
....................    restart_wdt();  
*
2402:  CLRWDT
....................   
....................    strcpy(temp,"INHIBITED");  
2404:  CLRF   FEA
2406:  MOVLW  1A
2408:  MOVWF  FE9
240A:  MOVFF  FF2,4A7
240E:  BCF    FF2.7
2410:  MOVLW  00
2412:  CALL   0304
2416:  TBLRD*-
2418:  TBLRD*+
241A:  MOVF   FF5,W
241C:  MOVWF  FEE
241E:  IORLW  00
2420:  BNZ   2418
2422:  MOVLB  4
2424:  BTFSC  xA7.7
2426:  BSF    FF2.7
....................    glcd_text57(250,30,temp , 1 , off);  
2428:  CLRF   xAF
242A:  MOVLW  FA
242C:  MOVWF  xAE
242E:  CLRF   xB1
2430:  MOVLW  1E
2432:  MOVWF  xB0
2434:  CLRF   xB3
2436:  MOVLW  1A
2438:  MOVWF  xB2
243A:  MOVLW  01
243C:  MOVWF  xB4
243E:  CLRF   xB5
2440:  MOVLB  0
2442:  CALL   0E42
....................   
....................    fputc(0x63,RS232);  
2446:  MOVLW  63
2448:  BTFSS  F9E.4
244A:  BRA    2448
244C:  MOVWF  FAD
....................    fputc(0x0f,RS232);  
244E:  MOVLW  0F
2450:  BTFSS  F9E.4
2452:  BRA    2450
2454:  MOVWF  FAD
....................   
....................    strcpy(temp,"TOGGLE");  
2456:  CLRF   FEA
2458:  MOVLW  1A
245A:  MOVWF  FE9
245C:  MOVFF  FF2,4A7
2460:  BCF    FF2.7
2462:  MOVLW  00
2464:  CALL   0328
2468:  TBLRD*-
246A:  TBLRD*+
246C:  MOVF   FF5,W
246E:  MOVWF  FEE
2470:  IORLW  00
2472:  BNZ   246A
2474:  MOVLB  4
2476:  BTFSC  xA7.7
2478:  BSF    FF2.7
....................    glcd_text57(260,30,temp , 1 , ON);  
247A:  MOVLW  01
247C:  MOVWF  xAF
247E:  MOVLW  04
2480:  MOVWF  xAE
2482:  CLRF   xB1
2484:  MOVLW  1E
2486:  MOVWF  xB0
2488:  CLRF   xB3
248A:  MOVLW  1A
248C:  MOVWF  xB2
248E:  MOVLW  01
2490:  MOVWF  xB4
2492:  MOVWF  xB5
2494:  MOVLB  0
2496:  CALL   0E42
....................    delay_ms(1000);  
249A:  MOVLW  04
249C:  MOVLB  4
249E:  MOVWF  xA7
24A0:  MOVLW  FA
24A2:  MOVWF  xA8
24A4:  MOVLB  0
24A6:  CALL   11C0
24AA:  MOVLB  4
24AC:  DECFSZ xA7,F
24AE:  BRA    24A0
....................    glcd_text57(260,30,temp , 1 , Off);  
24B0:  MOVLW  01
24B2:  MOVWF  xAF
24B4:  MOVLW  04
24B6:  MOVWF  xAE
24B8:  CLRF   xB1
24BA:  MOVLW  1E
24BC:  MOVWF  xB0
24BE:  CLRF   xB3
24C0:  MOVLW  1A
24C2:  MOVWF  xB2
24C4:  MOVLW  01
24C6:  MOVWF  xB4
24C8:  CLRF   xB5
24CA:  MOVLB  0
24CC:  CALL   0E42
24D0:  CLRF   17
24D2:  BTFSC  FF2.7
24D4:  BSF    17.7
24D6:  BCF    FF2.7
....................   
....................    Leggi();  
24D8:  BSF    F9E.5
24DA:  BTFSC  17.7
24DC:  BSF    FF2.7
....................   
....................    NULL_OFFSET();  
24DE:  RCALL  22B2
....................   
.................... }  
24E0:  RETLW  00
....................   
.................... Guadagno()  
.................... {  
....................   
....................    sprintf(temp,"Gain=");  
*
1896:  MOVLB  4
1898:  CLRF   xA6
189A:  MOVLW  1A
189C:  MOVWF  xA5
189E:  CLRF   xA7
18A0:  MOVF   xA7,W
18A2:  MOVLB  0
18A4:  CALL   034A
18A8:  MOVLB  4
18AA:  INCF   xA7,F
18AC:  MOVWF  00
18AE:  MOVFF  00,4B9
18B2:  MOVLB  0
18B4:  CALL   1040
18B8:  MOVLW  05
18BA:  MOVLB  4
18BC:  SUBWF  xA7,W
18BE:  BNZ   18A0
....................    glcd_text57(255,65,temp , 1 , ON);  
18C0:  CLRF   xAF
18C2:  MOVLW  FF
18C4:  MOVWF  xAE
18C6:  CLRF   xB1
18C8:  MOVLW  41
18CA:  MOVWF  xB0
18CC:  CLRF   xB3
18CE:  MOVLW  1A
18D0:  MOVWF  xB2
18D2:  MOVLW  01
18D4:  MOVWF  xB4
18D6:  MOVWF  xB5
18D8:  MOVLB  0
18DA:  CALL   0E42
....................   
....................    gain=read_adc();  
18DE:  BSF    FC2.1
18E0:  BTFSC  FC2.1
18E2:  BRA    18E0
18E4:  MOVFF  FC3,50
18E8:  MOVFF  FC4,51
....................    fputc(0x67,RS232);  
18EC:  MOVLW  67
18EE:  BTFSS  F9E.4
18F0:  BRA    18EE
18F2:  MOVWF  FAD
....................    fputc(gain/4,RS232);  
18F4:  MOVFF  51,4AA
18F8:  MOVFF  50,4A9
18FC:  MOVLB  4
18FE:  CLRF   xAC
1900:  MOVLW  04
1902:  MOVWF  xAB
1904:  MOVLB  0
1906:  RCALL  1348
1908:  MOVFF  02,4A8
190C:  MOVFF  01,4A7
1910:  MOVLB  4
1912:  MOVF   01,W
1914:  BTFSS  F9E.4
1916:  BRA    1914
1918:  MOVWF  FAD
....................   
....................    GAIN_INDICATOR=(255-gain/4)/4;  
191A:  MOVFF  51,4AA
191E:  MOVFF  50,4A9
1922:  CLRF   xAC
1924:  MOVLW  04
1926:  MOVWF  xAB
1928:  MOVLB  0
192A:  RCALL  1348
192C:  MOVFF  02,03
1930:  MOVF   01,W
1932:  SUBLW  FF
1934:  MOVLB  4
1936:  MOVWF  xA7
1938:  MOVLW  00
193A:  SUBFWB 02,W
193C:  MOVWF  xA8
193E:  MOVFF  4A8,4AA
1942:  MOVFF  4A7,4A9
1946:  CLRF   xAC
1948:  MOVLW  04
194A:  MOVWF  xAB
194C:  MOVLB  0
194E:  RCALL  1348
1950:  MOVFF  01,5E
1954:  MOVFF  02,5F
....................    GAIN_TEXT_INDICATOR=(1024-gain)/4;  
1958:  MOVLW  00
195A:  BSF    FD8.0
195C:  SUBFWB 50,W
195E:  MOVLB  4
1960:  MOVWF  xA7
1962:  MOVLW  04
1964:  SUBFWB 51,W
1966:  MOVWF  xA8
1968:  MOVFF  4A8,4AA
196C:  MOVFF  4A7,4A9
1970:  CLRF   xAC
1972:  MOVLW  04
1974:  MOVWF  xAB
1976:  MOVLB  0
1978:  RCALL  1348
197A:  MOVFF  01,60
197E:  MOVFF  02,61
....................    GAIN_TEXT_INDICATOR=GAIN_TEXT_INDICATOR*0.29-8.13+40;  
1982:  MOVFF  61,4A8
1986:  MOVFF  60,4A7
198A:  RCALL  13C2
198C:  MOVFF  03,4AE
1990:  MOVFF  02,4AD
1994:  MOVFF  01,4AC
1998:  MOVFF  00,4AB
199C:  MOVLW  E1
199E:  MOVLB  4
19A0:  MOVWF  xB2
19A2:  MOVLW  7A
19A4:  MOVWF  xB1
19A6:  MOVLW  14
19A8:  MOVWF  xB0
19AA:  MOVLW  7D
19AC:  MOVWF  xAF
19AE:  MOVLB  0
19B0:  RCALL  13FA
19B2:  MOVFF  00,4A7
19B6:  MOVFF  01,4A8
19BA:  MOVFF  02,4A9
19BE:  MOVFF  03,4AA
19C2:  BSF    FD8.1
19C4:  MOVFF  03,4B2
19C8:  MOVFF  02,4B1
19CC:  MOVFF  01,4B0
19D0:  MOVFF  00,4AF
19D4:  MOVLW  7B
19D6:  MOVLB  4
19D8:  MOVWF  xB6
19DA:  MOVLW  14
19DC:  MOVWF  xB5
19DE:  MOVLW  02
19E0:  MOVWF  xB4
19E2:  MOVLW  82
19E4:  MOVWF  xB3
19E6:  MOVLB  0
19E8:  RCALL  14F2
19EA:  MOVFF  00,4AB
19EE:  MOVFF  01,4AC
19F2:  MOVFF  02,4AD
19F6:  MOVFF  03,4AE
19FA:  BCF    FD8.1
19FC:  MOVFF  03,4B2
1A00:  MOVFF  02,4B1
1A04:  MOVFF  01,4B0
1A08:  MOVFF  00,4AF
1A0C:  MOVLB  4
1A0E:  CLRF   xB6
1A10:  CLRF   xB5
1A12:  MOVLW  20
1A14:  MOVWF  xB4
1A16:  MOVLW  84
1A18:  MOVWF  xB3
1A1A:  MOVLB  0
1A1C:  RCALL  14F2
1A1E:  MOVFF  03,4B2
1A22:  MOVFF  02,4B1
1A26:  MOVFF  01,4B0
1A2A:  MOVFF  00,4AF
1A2E:  RCALL  1770
1A30:  MOVFF  02,61
1A34:  MOVFF  01,60
....................   
....................    //MEDIA=GAIN_TEXT_INDICATOR/4;  
....................   
....................    glcd_rect(285, 65, 318, 75, on, off);  
1A38:  MOVLW  01
1A3A:  MOVLB  4
1A3C:  MOVWF  xAA
1A3E:  MOVLW  1D
1A40:  MOVWF  xA9
1A42:  CLRF   xAC
1A44:  MOVLW  41
1A46:  MOVWF  xAB
1A48:  MOVLW  01
1A4A:  MOVWF  xAE
1A4C:  MOVLW  3E
1A4E:  MOVWF  xAD
1A50:  CLRF   xB0
1A52:  MOVLW  4B
1A54:  MOVWF  xAF
1A56:  MOVLW  01
1A58:  MOVWF  xB1
1A5A:  CLRF   xB2
1A5C:  MOVLB  0
1A5E:  CALL   1060
....................    sprintf(temp,"%lddB",GAIN_TEXT_INDICATOR);  
1A62:  MOVLB  4
1A64:  CLRF   xA6
1A66:  MOVLW  1A
1A68:  MOVWF  xA5
1A6A:  MOVLW  10
1A6C:  MOVWF  FE9
1A6E:  MOVFF  61,4A8
1A72:  MOVFF  60,4A7
1A76:  MOVLB  0
1A78:  BRA    17AE
1A7A:  MOVLW  64
1A7C:  MOVLB  4
1A7E:  MOVWF  xB9
1A80:  MOVLB  0
1A82:  CALL   1040
1A86:  MOVLW  42
1A88:  MOVLB  4
1A8A:  MOVWF  xB9
1A8C:  MOVLB  0
1A8E:  CALL   1040
....................    glcd_text57(285,65,temp , 1 , ON);  
1A92:  MOVLW  01
1A94:  MOVLB  4
1A96:  MOVWF  xAF
1A98:  MOVLW  1D
1A9A:  MOVWF  xAE
1A9C:  CLRF   xB1
1A9E:  MOVLW  41
1AA0:  MOVWF  xB0
1AA2:  CLRF   xB3
1AA4:  MOVLW  1A
1AA6:  MOVWF  xB2
1AA8:  MOVLW  01
1AAA:  MOVWF  xB4
1AAC:  MOVWF  xB5
1AAE:  MOVLB  0
1AB0:  CALL   0E42
....................   
....................    glcd_rect(246, 81, 308, 81, on, off);  
1AB4:  MOVLB  4
1AB6:  CLRF   xAA
1AB8:  MOVLW  F6
1ABA:  MOVWF  xA9
1ABC:  CLRF   xAC
1ABE:  MOVLW  51
1AC0:  MOVWF  xAB
1AC2:  MOVLW  01
1AC4:  MOVWF  xAE
1AC6:  MOVLW  34
1AC8:  MOVWF  xAD
1ACA:  CLRF   xB0
1ACC:  MOVLW  51
1ACE:  MOVWF  xAF
1AD0:  MOVLW  01
1AD2:  MOVWF  xB1
1AD4:  CLRF   xB2
1AD6:  MOVLB  0
1AD8:  CALL   1060
....................    glcd_rect(245, 80, 308, 82, off, on);  
1ADC:  MOVLB  4
1ADE:  CLRF   xAA
1AE0:  MOVLW  F5
1AE2:  MOVWF  xA9
1AE4:  CLRF   xAC
1AE6:  MOVLW  50
1AE8:  MOVWF  xAB
1AEA:  MOVLW  01
1AEC:  MOVWF  xAE
1AEE:  MOVLW  34
1AF0:  MOVWF  xAD
1AF2:  CLRF   xB0
1AF4:  MOVLW  52
1AF6:  MOVWF  xAF
1AF8:  CLRF   xB1
1AFA:  MOVLW  01
1AFC:  MOVWF  xB2
1AFE:  MOVLB  0
1B00:  CALL   1060
....................    glcd_rect(246, 81, 245+GAIN_INDICATOR, 81, on, on);  
1B04:  MOVLW  F5
1B06:  ADDWF  5E,W
1B08:  MOVLB  4
1B0A:  MOVWF  xA7
1B0C:  MOVLW  00
1B0E:  ADDWFC 5F,W
1B10:  MOVWF  xA8
1B12:  CLRF   xAA
1B14:  MOVLW  F6
1B16:  MOVWF  xA9
1B18:  CLRF   xAC
1B1A:  MOVLW  51
1B1C:  MOVWF  xAB
1B1E:  MOVFF  4A8,4AE
1B22:  MOVFF  4A7,4AD
1B26:  CLRF   xB0
1B28:  MOVWF  xAF
1B2A:  MOVLW  01
1B2C:  MOVWF  xB1
1B2E:  MOVWF  xB2
1B30:  MOVLB  0
1B32:  CALL   1060
....................   
.................... }  
1B36:  RETLW  00
....................   
....................   
.................... REDRAW_DISPLAY()  
.................... {  
....................             tempo=0;  
*
255A:  MOVLB  4
255C:  CLRF   xA4
255E:  CLRF   xA3
....................             glcd_fillScreen(off);  
2560:  CLRF   xA8
2562:  MOVLB  0
2564:  CALL   06EA
....................             griglia();  
2568:  CALL   0B60
....................             Rett();  
256C:  CALL   0C98
....................             Batteria();  
2570:  RCALL  20BC
....................             Guadagno();  
2572:  CALL   1896
....................   
....................   
....................             strcpy(temp,"Clutter");  
2576:  CLRF   FEA
2578:  MOVLW  1A
257A:  MOVWF  FE9
257C:  MOVFF  FF2,4A7
2580:  BCF    FF2.7
2582:  MOVLW  00
2584:  CALL   036A
2588:  TBLRD*-
258A:  TBLRD*+
258C:  MOVF   FF5,W
258E:  MOVWF  FEE
2590:  IORLW  00
2592:  BNZ   258A
2594:  MOVLB  4
2596:  BTFSC  xA7.7
2598:  BSF    FF2.7
....................             glcd_text57(255,10,temp , 1 , ON);  
259A:  CLRF   xAF
259C:  MOVLW  FF
259E:  MOVWF  xAE
25A0:  CLRF   xB1
25A2:  MOVLW  0A
25A4:  MOVWF  xB0
25A6:  CLRF   xB3
25A8:  MOVLW  1A
25AA:  MOVWF  xB2
25AC:  MOVLW  01
25AE:  MOVWF  xB4
25B0:  MOVWF  xB5
25B2:  MOVLB  0
25B4:  CALL   0E42
....................             strcpy(temp,"Suppression");  
25B8:  CLRF   FEA
25BA:  MOVLW  1A
25BC:  MOVWF  FE9
25BE:  MOVFF  FF2,4A7
25C2:  BCF    FF2.7
25C4:  MOVLW  00
25C6:  CALL   038C
25CA:  TBLRD*-
25CC:  TBLRD*+
25CE:  MOVF   FF5,W
25D0:  MOVWF  FEE
25D2:  IORLW  00
25D4:  BNZ   25CC
25D6:  MOVLB  4
25D8:  BTFSC  xA7.7
25DA:  BSF    FF2.7
....................             glcd_text57(245,20,temp , 1 , ON);  
25DC:  CLRF   xAF
25DE:  MOVLW  F5
25E0:  MOVWF  xAE
25E2:  CLRF   xB1
25E4:  MOVLW  14
25E6:  MOVWF  xB0
25E8:  CLRF   xB3
25EA:  MOVLW  1A
25EC:  MOVWF  xB2
25EE:  MOVLW  01
25F0:  MOVWF  xB4
25F2:  MOVWF  xB5
25F4:  MOVLB  0
25F6:  CALL   0E42
....................             sprintf(temp,"RS232");  
25FA:  MOVLB  4
25FC:  CLRF   xA6
25FE:  MOVLW  1A
2600:  MOVWF  xA5
2602:  CLRF   xA7
2604:  MOVF   xA7,W
2606:  MOVLB  0
2608:  CALL   03B2
260C:  MOVLB  4
260E:  INCF   xA7,F
2610:  MOVWF  00
2612:  MOVFF  00,4B9
2616:  MOVLB  0
2618:  CALL   1040
261C:  MOVLW  05
261E:  MOVLB  4
2620:  SUBWF  xA7,W
2622:  BNZ   2604
....................             glcd_text57(245,150,temp,1,on);  
2624:  CLRF   xAF
2626:  MOVLW  F5
2628:  MOVWF  xAE
262A:  CLRF   xB1
262C:  MOVLW  96
262E:  MOVWF  xB0
2630:  CLRF   xB3
2632:  MOVLW  1A
2634:  MOVWF  xB2
2636:  MOVLW  01
2638:  MOVWF  xB4
263A:  MOVWF  xB5
263C:  MOVLB  0
263E:  CALL   0E42
....................             sprintf(temp," Connection");  
2642:  MOVLB  4
2644:  CLRF   xA6
2646:  MOVLW  1A
2648:  MOVWF  xA5
264A:  CLRF   xA7
264C:  MOVF   xA7,W
264E:  MOVLB  0
2650:  CALL   03D2
2654:  MOVLB  4
2656:  INCF   xA7,F
2658:  MOVWF  00
265A:  MOVFF  00,4B9
265E:  MOVLB  0
2660:  CALL   1040
2664:  MOVLW  0B
2666:  MOVLB  4
2668:  SUBWF  xA7,W
266A:  BNZ   264C
....................             glcd_text57(245,158,temp,1,on);  
266C:  CLRF   xAF
266E:  MOVLW  F5
2670:  MOVWF  xAE
2672:  CLRF   xB1
2674:  MOVLW  9E
2676:  MOVWF  xB0
2678:  CLRF   xB3
267A:  MOVLW  1A
267C:  MOVWF  xB2
267E:  MOVLW  01
2680:  MOVWF  xB4
2682:  MOVWF  xB5
2684:  MOVLB  0
2686:  CALL   0E42
....................   
.................... }  
268A:  RETLW  00
....................   
.................... SWITCH_DISPLAY_MODE()  
.................... {  
....................   
....................    if(DISPLAY_MODE)  
*
26B6:  BTFSS  62.2
26B8:  BRA    26C0
....................       {  
....................       DISPLAY_MODE=0;  
26BA:  BCF    62.2
....................       REDRAW_DISPLAY();  
26BC:  RCALL  255A
....................       }  
....................    else  
26BE:  BRA    26C4
....................       {  
....................       DISPLAY_MODE=1;  
26C0:  BSF    62.2
....................       REDRAW_DISPLAY();  
26C2:  RCALL  255A
....................       }  
.................... }  
26C4:  GOTO   26D8 (RETURN)
....................   
.................... TEST_SOPPRESSIONE()  
.................... {  
....................   
....................    if(!input(pin_b0))  
26C8:  BSF    F93.0
26CA:  BTFSC  F81.0
26CC:  BRA    26D8
....................    {  
....................   
....................       SOPPRESSIONE();  
26CE:  RCALL  2402
....................       if(!input(pin_b0))  
26D0:  BSF    F93.0
26D2:  BTFSC  F81.0
26D4:  BRA    26D8
....................       {  
....................          SWITCH_DISPLAY_MODE();  
26D6:  BRA    26B6
....................       }  
....................    }  
.................... }  
26D8:  GOTO   2F2C (RETURN)
....................   
....................   
.................... Test_Guadagno()  
.................... {  
....................   
....................    if((read_adc()>gain+6)||(read_adc()<gain-6))  
26DC:  BSF    FC2.1
26DE:  BTFSC  FC2.1
26E0:  BRA    26DE
26E2:  MOVFF  FC4,4A8
26E6:  MOVLB  4
26E8:  MOVFF  FC3,4A7
26EC:  MOVLW  06
26EE:  ADDWF  50,W
26F0:  MOVWF  01
26F2:  MOVLW  00
26F4:  ADDWFC 51,W
26F6:  MOVWF  03
26F8:  MOVF   01,W
26FA:  BTFSS  03.7
26FC:  BRA    2704
26FE:  BTFSS  xA8.7
2700:  BRA    2750
2702:  BRA    2708
2704:  BTFSC  xA8.7
2706:  BRA    2716
2708:  MOVF   03,W
270A:  SUBWF  xA8,W
270C:  BNC   2716
270E:  BNZ   2750
2710:  MOVF   xA7,W
2712:  SUBWF  01,W
2714:  BNC   2750
2716:  BSF    FC2.1
2718:  BTFSC  FC2.1
271A:  BRA    2718
271C:  MOVFF  FC3,4A9
2720:  MOVFF  FC4,4AA
2724:  MOVLW  06
2726:  SUBWF  50,W
2728:  MOVWF  00
272A:  MOVLW  00
272C:  SUBWFB 51,W
272E:  MOVWF  03
2730:  MOVFF  00,01
2734:  BTFSS  FC4.7
2736:  BRA    273E
2738:  BTFSS  03.7
273A:  BRA    2750
273C:  BRA    2742
273E:  BTFSC  03.7
2740:  BRA    2758
2742:  MOVF   xAA,W
2744:  SUBWF  03,W
2746:  BNC   2758
2748:  BNZ   2750
274A:  MOVF   01,W
274C:  SUBWF  xA9,W
274E:  BC    2758
....................    {  
....................   
....................       Guadagno();  
2750:  MOVLB  0
2752:  CALL   1896
2756:  MOVLB  4
....................    }  
....................   
.................... }  
2758:  MOVLB  0
275A:  GOTO   2F30 (RETURN)
....................   
.................... Reset_cmd()  
.................... {  
....................   
....................    fputc(0x69,RS232);  
*
11F2:  MOVLW  69
11F4:  BTFSS  F9E.4
11F6:  BRA    11F4
11F8:  MOVWF  FAD
....................    fputc(0x69,RS232);  
11FA:  MOVLW  69
11FC:  BTFSS  F9E.4
11FE:  BRA    11FC
1200:  MOVWF  FAD
....................   
....................    glcd_rect(15, 80, 225, 160, on, off);  
1202:  MOVLB  4
1204:  CLRF   xAA
1206:  MOVLW  0F
1208:  MOVWF  xA9
120A:  CLRF   xAC
120C:  MOVLW  50
120E:  MOVWF  xAB
1210:  CLRF   xAE
1212:  MOVLW  E1
1214:  MOVWF  xAD
1216:  CLRF   xB0
1218:  MOVLW  A0
121A:  MOVWF  xAF
121C:  MOVLW  01
121E:  MOVWF  xB1
1220:  CLRF   xB2
1222:  MOVLB  0
1224:  RCALL  1060
....................    glcd_rect(15, 80, 225, 160, off, on);  
1226:  MOVLB  4
1228:  CLRF   xAA
122A:  MOVLW  0F
122C:  MOVWF  xA9
122E:  CLRF   xAC
1230:  MOVLW  50
1232:  MOVWF  xAB
1234:  CLRF   xAE
1236:  MOVLW  E1
1238:  MOVWF  xAD
123A:  CLRF   xB0
123C:  MOVLW  A0
123E:  MOVWF  xAF
1240:  CLRF   xB1
1242:  MOVLW  01
1244:  MOVWF  xB2
1246:  MOVLB  0
1248:  RCALL  1060
....................    sprintf(temp,"RESETTING SYSTEM");  
124A:  MOVLB  4
124C:  CLRF   xA6
124E:  MOVLW  1A
1250:  MOVWF  xA5
1252:  CLRF   xA7
1254:  MOVF   xA7,W
1256:  MOVLB  0
1258:  CALL   03F8
125C:  MOVLB  4
125E:  INCF   xA7,F
1260:  MOVWF  00
1262:  MOVFF  00,4B9
1266:  MOVLB  0
1268:  RCALL  1040
126A:  MOVLW  10
126C:  MOVLB  4
126E:  SUBWF  xA7,W
1270:  BNZ   1254
....................    glcd_text57(30,110,temp , 2 , ON);  
1272:  CLRF   xAF
1274:  MOVLW  1E
1276:  MOVWF  xAE
1278:  CLRF   xB1
127A:  MOVLW  6E
127C:  MOVWF  xB0
127E:  CLRF   xB3
1280:  MOVLW  1A
1282:  MOVWF  xB2
1284:  MOVLW  02
1286:  MOVWF  xB4
1288:  MOVLW  01
128A:  MOVWF  xB5
128C:  MOVLB  0
128E:  RCALL  0E42
....................    delay_ms(300);  
1290:  MOVLW  02
1292:  MOVLB  4
1294:  MOVWF  xA7
1296:  MOVLW  96
1298:  MOVWF  xA8
129A:  MOVLB  0
129C:  RCALL  11C0
129E:  MOVLB  4
12A0:  DECFSZ xA7,F
12A2:  BRA    1296
....................    glcd_text57(30,110,temp , 2 , off);  
12A4:  CLRF   xAF
12A6:  MOVLW  1E
12A8:  MOVWF  xAE
12AA:  CLRF   xB1
12AC:  MOVLW  6E
12AE:  MOVWF  xB0
12B0:  CLRF   xB3
12B2:  MOVLW  1A
12B4:  MOVWF  xB2
12B6:  MOVLW  02
12B8:  MOVWF  xB4
12BA:  CLRF   xB5
12BC:  MOVLB  0
12BE:  RCALL  0E42
....................    delay_ms(300);  
12C0:  MOVLW  02
12C2:  MOVLB  4
12C4:  MOVWF  xA7
12C6:  MOVLW  96
12C8:  MOVWF  xA8
12CA:  MOVLB  0
12CC:  RCALL  11C0
12CE:  MOVLB  4
12D0:  DECFSZ xA7,F
12D2:  BRA    12C6
....................    glcd_text57(30,110,temp , 2 , ON);  
12D4:  CLRF   xAF
12D6:  MOVLW  1E
12D8:  MOVWF  xAE
12DA:  CLRF   xB1
12DC:  MOVLW  6E
12DE:  MOVWF  xB0
12E0:  CLRF   xB3
12E2:  MOVLW  1A
12E4:  MOVWF  xB2
12E6:  MOVLW  02
12E8:  MOVWF  xB4
12EA:  MOVLW  01
12EC:  MOVWF  xB5
12EE:  MOVLB  0
12F0:  RCALL  0E42
....................    delay_ms(300);  
12F2:  MOVLW  02
12F4:  MOVLB  4
12F6:  MOVWF  xA7
12F8:  MOVLW  96
12FA:  MOVWF  xA8
12FC:  MOVLB  0
12FE:  RCALL  11C0
1300:  MOVLB  4
1302:  DECFSZ xA7,F
1304:  BRA    12F8
....................    glcd_text57(30,110,temp , 2 , off);  
1306:  CLRF   xAF
1308:  MOVLW  1E
130A:  MOVWF  xAE
130C:  CLRF   xB1
130E:  MOVLW  6E
1310:  MOVWF  xB0
1312:  CLRF   xB3
1314:  MOVLW  1A
1316:  MOVWF  xB2
1318:  MOVLW  02
131A:  MOVWF  xB4
131C:  CLRF   xB5
131E:  MOVLB  0
1320:  RCALL  0E42
....................    glcd_rect(15, 80, 225, 160, off, off);  
1322:  MOVLB  4
1324:  CLRF   xAA
1326:  MOVLW  0F
1328:  MOVWF  xA9
132A:  CLRF   xAC
132C:  MOVLW  50
132E:  MOVWF  xAB
1330:  CLRF   xAE
1332:  MOVLW  E1
1334:  MOVWF  xAD
1336:  CLRF   xB0
1338:  MOVLW  A0
133A:  MOVWF  xAF
133C:  CLRF   xB1
133E:  CLRF   xB2
1340:  MOVLB  0
1342:  RCALL  1060
....................   
.................... }  
1344:  GOTO   2A0E (RETURN)
....................   
.................... RS232_TEST()  
.................... {  
....................    restart_wdt();  
*
1B38:  CLRWDT
....................   
....................    while(!RS232_FLAG)  
....................    {  
1B3A:  BTFSC  62.0
1B3C:  BRA    1BCC
....................       glcd_rect(260,173,318,180,on,off);  
1B3E:  MOVLW  01
1B40:  MOVLB  4
1B42:  MOVWF  xAA
1B44:  MOVLW  04
1B46:  MOVWF  xA9
1B48:  CLRF   xAC
1B4A:  MOVLW  AD
1B4C:  MOVWF  xAB
1B4E:  MOVLW  01
1B50:  MOVWF  xAE
1B52:  MOVLW  3E
1B54:  MOVWF  xAD
1B56:  CLRF   xB0
1B58:  MOVLW  B4
1B5A:  MOVWF  xAF
1B5C:  MOVLW  01
1B5E:  MOVWF  xB1
1B60:  CLRF   xB2
1B62:  MOVLB  0
1B64:  CALL   1060
....................       delay_ms(200);  
1B68:  MOVLW  C8
1B6A:  MOVLB  4
1B6C:  MOVWF  xA8
1B6E:  MOVLB  0
1B70:  CALL   11C0
....................       sprintf(temp,"Missing!!");  
1B74:  MOVLB  4
1B76:  CLRF   xA6
1B78:  MOVLW  1A
1B7A:  MOVWF  xA5
1B7C:  CLRF   xA7
1B7E:  MOVF   xA7,W
1B80:  MOVLB  0
1B82:  CALL   0424
1B86:  MOVLB  4
1B88:  INCF   xA7,F
1B8A:  MOVWF  00
1B8C:  MOVFF  00,4B9
1B90:  MOVLB  0
1B92:  CALL   1040
1B96:  MOVLW  09
1B98:  MOVLB  4
1B9A:  SUBWF  xA7,W
1B9C:  BNZ   1B7E
....................       glcd_text57(260,173,temp,1,on);  
1B9E:  MOVLW  01
1BA0:  MOVWF  xAF
1BA2:  MOVLW  04
1BA4:  MOVWF  xAE
1BA6:  CLRF   xB1
1BA8:  MOVLW  AD
1BAA:  MOVWF  xB0
1BAC:  CLRF   xB3
1BAE:  MOVLW  1A
1BB0:  MOVWF  xB2
1BB2:  MOVLW  01
1BB4:  MOVWF  xB4
1BB6:  MOVWF  xB5
1BB8:  MOVLB  0
1BBA:  CALL   0E42
....................       delay_ms(200);  
1BBE:  MOVLW  C8
1BC0:  MOVLB  4
1BC2:  MOVWF  xA8
1BC4:  MOVLB  0
1BC6:  CALL   11C0
....................   
....................    }  
1BCA:  BRA    1B3A
....................   
....................    if(RS232_FLAG)  
1BCC:  BTFSS  62.0
1BCE:  BRA    1C5C
....................    {  
....................       glcd_rect(260,173,318,180,on,off);  
1BD0:  MOVLW  01
1BD2:  MOVLB  4
1BD4:  MOVWF  xAA
1BD6:  MOVLW  04
1BD8:  MOVWF  xA9
1BDA:  CLRF   xAC
1BDC:  MOVLW  AD
1BDE:  MOVWF  xAB
1BE0:  MOVLW  01
1BE2:  MOVWF  xAE
1BE4:  MOVLW  3E
1BE6:  MOVWF  xAD
1BE8:  CLRF   xB0
1BEA:  MOVLW  B4
1BEC:  MOVWF  xAF
1BEE:  MOVLW  01
1BF0:  MOVWF  xB1
1BF2:  CLRF   xB2
1BF4:  MOVLB  0
1BF6:  CALL   1060
....................       delay_ms(200);  
1BFA:  MOVLW  C8
1BFC:  MOVLB  4
1BFE:  MOVWF  xA8
1C00:  MOVLB  0
1C02:  CALL   11C0
....................       sprintf(temp,"Available");  
1C06:  MOVLB  4
1C08:  CLRF   xA6
1C0A:  MOVLW  1A
1C0C:  MOVWF  xA5
1C0E:  CLRF   xA7
1C10:  MOVF   xA7,W
1C12:  MOVLB  0
1C14:  CALL   0448
1C18:  MOVLB  4
1C1A:  INCF   xA7,F
1C1C:  MOVWF  00
1C1E:  MOVFF  00,4B9
1C22:  MOVLB  0
1C24:  CALL   1040
1C28:  MOVLW  09
1C2A:  MOVLB  4
1C2C:  SUBWF  xA7,W
1C2E:  BNZ   1C10
....................       glcd_text57(260,173,temp,1,on);  
1C30:  MOVLW  01
1C32:  MOVWF  xAF
1C34:  MOVLW  04
1C36:  MOVWF  xAE
1C38:  CLRF   xB1
1C3A:  MOVLW  AD
1C3C:  MOVWF  xB0
1C3E:  CLRF   xB3
1C40:  MOVLW  1A
1C42:  MOVWF  xB2
1C44:  MOVLW  01
1C46:  MOVWF  xB4
1C48:  MOVWF  xB5
1C4A:  MOVLB  0
1C4C:  CALL   0E42
....................       delay_ms(200);  
1C50:  MOVLW  C8
1C52:  MOVLB  4
1C54:  MOVWF  xA8
1C56:  MOVLB  0
1C58:  CALL   11C0
....................    }  
....................   
....................    RS232_FLAG=0;  
1C5C:  BCF    62.0
....................   
.................... }  
1C5E:  RETLW  00
....................   
.................... Restart_measure()  
.................... {  
....................    tempo=0;  
....................    glcd_fillScreen(off);  
....................    griglia();  
....................    Rett();  
....................    Batteria();  
....................    Guadagno();  
....................   
....................   
....................    strcpy(temp,"Clutter");  
....................    glcd_text57(255,10,temp , 1 , ON);  
....................    strcpy(temp,"Suppression");  
....................    glcd_text57(245,20,temp , 1 , ON);  
....................    sprintf(temp,"RS232");  
....................    glcd_text57(245,150,temp,1,on);  
....................    sprintf(temp," Connection");  
....................    glcd_text57(245,158,temp,1,on);  
....................   
.................... }  
....................   
.................... void main()  
.................... {  
*
275E:  CLRF   FF8
2760:  BCF    FD0.7
2762:  BSF    0D.7
2764:  CLRF   FEA
2766:  CLRF   FE9
2768:  MOVF   FC1,W
276A:  ANDLW  C0
276C:  IORLW  0F
276E:  MOVWF  FC1
2770:  MOVLW  07
2772:  MOVWF  FB4
2774:  MOVF   F92,W
2776:  CLRWDT
2778:  MOVF   FB4,W
277A:  BCF    FA1.6
277C:  BCF    FB8.3
277E:  MOVLW  0C
2780:  MOVWF  FAF
2782:  MOVLW  22
2784:  MOVWF  FAC
2786:  MOVLW  90
2788:  MOVWF  FAB
278A:  MOVLW  23
278C:  MOVWF  18
278E:  CLRF   19
2790:  CLRF   4C
2792:  MOVLW  08
2794:  MOVWF  4D
2796:  CLRF   4E
2798:  MOVWF  4F
279A:  MOVLW  32
279C:  MOVWF  50
279E:  CLRF   51
27A0:  MOVLW  17
27A2:  MOVWF  52
27A4:  MOVLW  08
27A6:  MOVWF  53
27A8:  MOVLW  27
27AA:  MOVWF  54
27AC:  MOVLW  08
27AE:  MOVWF  55
27B0:  CLRF   56
27B2:  CLRF   57
27B4:  CLRF   58
27B6:  CLRF   59
27B8:  CLRF   5A
27BA:  MOVLW  0F
27BC:  MOVWF  5B
27BE:  BCF    62.0
27C0:  BCF    62.1
27C2:  BCF    62.2
27C4:  MOVLB  4
27C6:  CLRF   xA3
27C8:  CLRF   xA4
27CA:  CLRF   xA5
27CC:  CLRF   xA6
....................   
....................   
....................    enable_interrupts(INT_RDA);  
27CE:  BSF    F9D.5
....................    enable_interrupts(GLOBAL);  
27D0:  MOVLW  C0
27D2:  IORWF  FF2,F
....................    setup_adc_ports(AN0_TO_AN1|VSS_VDD);  
27D4:  MOVF   FC1,W
27D6:  ANDLW  C0
27D8:  IORLW  0D
27DA:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_INTERNAL|ADC_TAD_MUL_0);  
27DC:  MOVF   FC0,W
27DE:  ANDLW  C0
27E0:  IORLW  07
27E2:  MOVWF  FC0
27E4:  BSF    FC0.7
27E6:  BSF    FC2.0
....................    set_adc_channel(0);  
27E8:  MOVLW  00
27EA:  MOVWF  01
27EC:  MOVF   FC2,W
27EE:  ANDLW  C3
27F0:  IORWF  01,W
27F2:  MOVWF  FC2
....................    setup_oscillator(osc_8mhz);  
27F4:  MOVLW  70
27F6:  MOVWF  FD3
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_128);  
27F8:  MOVLW  86
27FA:  MOVWF  FD5
....................   
....................    glcd_init(ON);  
27FC:  MOVLW  01
27FE:  MOVWF  xA7
2800:  MOVLB  0
2802:  GOTO   078E
....................   
....................    PLL_ENABLE=1;  
2806:  BSF    F9B.6
....................   
....................    restart_wdt();  
2808:  CLRWDT
....................    glcd_fillScreen(off);  
280A:  MOVLB  4
280C:  CLRF   xA8
280E:  MOVLB  0
2810:  CALL   06EA
....................   
....................   
....................    griglia();  
2814:  CALL   0B60
....................    Rett();  
2818:  CALL   0C98
....................   
....................    strcpy(temp,"Clutter");  
281C:  CLRF   FEA
281E:  MOVLW  1A
2820:  MOVWF  FE9
2822:  MOVFF  FF2,4A7
2826:  BCF    FF2.7
2828:  MOVLW  00
282A:  CALL   036A
282E:  TBLRD*-
2830:  TBLRD*+
2832:  MOVF   FF5,W
2834:  MOVWF  FEE
2836:  IORLW  00
2838:  BNZ   2830
283A:  MOVLB  4
283C:  BTFSC  xA7.7
283E:  BSF    FF2.7
....................    glcd_text57(255,10,temp , 1 , ON);  
2840:  CLRF   xAF
2842:  MOVLW  FF
2844:  MOVWF  xAE
2846:  CLRF   xB1
2848:  MOVLW  0A
284A:  MOVWF  xB0
284C:  CLRF   xB3
284E:  MOVLW  1A
2850:  MOVWF  xB2
2852:  MOVLW  01
2854:  MOVWF  xB4
2856:  MOVWF  xB5
2858:  MOVLB  0
285A:  CALL   0E42
....................    strcpy(temp,"Suppression");  
285E:  CLRF   FEA
2860:  MOVLW  1A
2862:  MOVWF  FE9
2864:  MOVFF  FF2,4A7
2868:  BCF    FF2.7
286A:  MOVLW  00
286C:  CALL   038C
2870:  TBLRD*-
2872:  TBLRD*+
2874:  MOVF   FF5,W
2876:  MOVWF  FEE
2878:  IORLW  00
287A:  BNZ   2872
287C:  MOVLB  4
287E:  BTFSC  xA7.7
2880:  BSF    FF2.7
....................    glcd_text57(245,20,temp , 1 , ON);  
2882:  CLRF   xAF
2884:  MOVLW  F5
2886:  MOVWF  xAE
2888:  CLRF   xB1
288A:  MOVLW  14
288C:  MOVWF  xB0
288E:  CLRF   xB3
2890:  MOVLW  1A
2892:  MOVWF  xB2
2894:  MOVLW  01
2896:  MOVWF  xB4
2898:  MOVWF  xB5
289A:  MOVLB  0
289C:  CALL   0E42
....................    sprintf(temp,"Battery");  
28A0:  MOVLB  4
28A2:  CLRF   xA6
28A4:  MOVLW  1A
28A6:  MOVWF  xA5
28A8:  CLRF   xA7
28AA:  MOVF   xA7,W
28AC:  MOVLB  0
28AE:  CALL   02A6
28B2:  MOVLB  4
28B4:  INCF   xA7,F
28B6:  MOVWF  00
28B8:  MOVFF  00,4B9
28BC:  MOVLB  0
28BE:  CALL   1040
28C2:  MOVLW  07
28C4:  MOVLB  4
28C6:  SUBWF  xA7,W
28C8:  BNZ   28AA
....................    glcd_text57(245,195,temp , 1 , ON);  
28CA:  CLRF   xAF
28CC:  MOVLW  F5
28CE:  MOVWF  xAE
28D0:  CLRF   xB1
28D2:  MOVLW  C3
28D4:  MOVWF  xB0
28D6:  CLRF   xB3
28D8:  MOVLW  1A
28DA:  MOVWF  xB2
28DC:  MOVLW  01
28DE:  MOVWF  xB4
28E0:  MOVWF  xB5
28E2:  MOVLB  0
28E4:  CALL   0E42
....................    sprintf(temp,"Level");  
28E8:  MOVLB  4
28EA:  CLRF   xA6
28EC:  MOVLW  1A
28EE:  MOVWF  xA5
28F0:  CLRF   xA7
28F2:  MOVF   xA7,W
28F4:  MOVLB  0
28F6:  CALL   02C8
28FA:  MOVLB  4
28FC:  INCF   xA7,F
28FE:  MOVWF  00
2900:  MOVFF  00,4B9
2904:  MOVLB  0
2906:  CALL   1040
290A:  MOVLW  05
290C:  MOVLB  4
290E:  SUBWF  xA7,W
2910:  BNZ   28F2
....................    glcd_text57(265,205,temp , 1 , ON);  
2912:  MOVLW  01
2914:  MOVWF  xAF
2916:  MOVLW  09
2918:  MOVWF  xAE
291A:  CLRF   xB1
291C:  MOVLW  CD
291E:  MOVWF  xB0
2920:  CLRF   xB3
2922:  MOVLW  1A
2924:  MOVWF  xB2
2926:  MOVLW  01
2928:  MOVWF  xB4
292A:  MOVWF  xB5
292C:  MOVLB  0
292E:  CALL   0E42
....................    sprintf(temp,"RS232");  
2932:  MOVLB  4
2934:  CLRF   xA6
2936:  MOVLW  1A
2938:  MOVWF  xA5
293A:  CLRF   xA7
293C:  MOVF   xA7,W
293E:  MOVLB  0
2940:  CALL   03B2
2944:  MOVLB  4
2946:  INCF   xA7,F
2948:  MOVWF  00
294A:  MOVFF  00,4B9
294E:  MOVLB  0
2950:  CALL   1040
2954:  MOVLW  05
2956:  MOVLB  4
2958:  SUBWF  xA7,W
295A:  BNZ   293C
....................    glcd_text57(245,150,temp,1,on);  
295C:  CLRF   xAF
295E:  MOVLW  F5
2960:  MOVWF  xAE
2962:  CLRF   xB1
2964:  MOVLW  96
2966:  MOVWF  xB0
2968:  CLRF   xB3
296A:  MOVLW  1A
296C:  MOVWF  xB2
296E:  MOVLW  01
2970:  MOVWF  xB4
2972:  MOVWF  xB5
2974:  MOVLB  0
2976:  CALL   0E42
....................    sprintf(temp," Connection");  
297A:  MOVLB  4
297C:  CLRF   xA6
297E:  MOVLW  1A
2980:  MOVWF  xA5
2982:  CLRF   xA7
2984:  MOVF   xA7,W
2986:  MOVLB  0
2988:  CALL   03D2
298C:  MOVLB  4
298E:  INCF   xA7,F
2990:  MOVWF  00
2992:  MOVFF  00,4B9
2996:  MOVLB  0
2998:  CALL   1040
299C:  MOVLW  0B
299E:  MOVLB  4
29A0:  SUBWF  xA7,W
29A2:  BNZ   2984
....................    glcd_text57(245,158,temp,1,on);  
29A4:  CLRF   xAF
29A6:  MOVLW  F5
29A8:  MOVWF  xAE
29AA:  CLRF   xB1
29AC:  MOVLW  9E
29AE:  MOVWF  xB0
29B0:  CLRF   xB3
29B2:  MOVLW  1A
29B4:  MOVWF  xB2
29B6:  MOVLW  01
29B8:  MOVWF  xB4
29BA:  MOVWF  xB5
29BC:  MOVLB  0
29BE:  CALL   0E42
....................    sprintf(temp,"Gain=");  
29C2:  MOVLB  4
29C4:  CLRF   xA6
29C6:  MOVLW  1A
29C8:  MOVWF  xA5
29CA:  CLRF   xA7
29CC:  MOVF   xA7,W
29CE:  MOVLB  0
29D0:  CALL   034A
29D4:  MOVLB  4
29D6:  INCF   xA7,F
29D8:  MOVWF  00
29DA:  MOVFF  00,4B9
29DE:  MOVLB  0
29E0:  CALL   1040
29E4:  MOVLW  05
29E6:  MOVLB  4
29E8:  SUBWF  xA7,W
29EA:  BNZ   29CC
....................    glcd_text57(255,65,temp , 1 , ON);  
29EC:  CLRF   xAF
29EE:  MOVLW  FF
29F0:  MOVWF  xAE
29F2:  CLRF   xB1
29F4:  MOVLW  41
29F6:  MOVWF  xB0
29F8:  CLRF   xB3
29FA:  MOVLW  1A
29FC:  MOVWF  xB2
29FE:  MOVLW  01
2A00:  MOVWF  xB4
2A02:  MOVWF  xB5
2A04:  MOVLB  0
2A06:  CALL   0E42
....................   
....................    Reset_cmd();  
2A0A:  GOTO   11F2
....................    griglia();  
2A0E:  CALL   0B60
....................    Rett();  
2A12:  CALL   0C98
....................    Guadagno();  
2A16:  CALL   1896
....................    RS232_TEST();  
2A1A:  CALL   1B38
....................    batteria();  
2A1E:  CALL   20BC
....................   
....................   
....................   
....................    switch ( restart_cause() )  
....................    {  
2A22:  MOVF   FD0,W
2A24:  ANDLW  0E
2A26:  BCF    FD0.1
2A28:  XORLW  04
2A2A:  BZ    2A32
2A2C:  XORLW  08
2A2E:  BZ    2AAA
2A30:  BRA    2B22
....................       case 4:  
....................       {  
....................          strcpy(temp,"WTD Timeout");  
2A32:  CLRF   FEA
2A34:  MOVLW  1A
2A36:  MOVWF  FE9
2A38:  MOVFF  FF2,4A7
2A3C:  BCF    FF2.7
2A3E:  MOVLW  00
2A40:  CALL   046C
2A44:  TBLRD*-
2A46:  TBLRD*+
2A48:  MOVF   FF5,W
2A4A:  MOVWF  FEE
2A4C:  IORLW  00
2A4E:  BNZ   2A46
2A50:  MOVLB  4
2A52:  BTFSC  xA7.7
2A54:  BSF    FF2.7
....................          glcd_text57(250,115,temp , 1 , ON);  
2A56:  CLRF   xAF
2A58:  MOVLW  FA
2A5A:  MOVWF  xAE
2A5C:  CLRF   xB1
2A5E:  MOVLW  73
2A60:  MOVWF  xB0
2A62:  CLRF   xB3
2A64:  MOVLW  1A
2A66:  MOVWF  xB2
2A68:  MOVLW  01
2A6A:  MOVWF  xB4
2A6C:  MOVWF  xB5
2A6E:  MOVLB  0
2A70:  CALL   0E42
....................          delay_ms(1000);  
2A74:  MOVLW  04
2A76:  MOVLB  4
2A78:  MOVWF  xA7
2A7A:  MOVLW  FA
2A7C:  MOVWF  xA8
2A7E:  MOVLB  0
2A80:  CALL   11C0
2A84:  MOVLB  4
2A86:  DECFSZ xA7,F
2A88:  BRA    2A7A
....................          glcd_text57(250,115,temp , 1 , Off);  
2A8A:  CLRF   xAF
2A8C:  MOVLW  FA
2A8E:  MOVWF  xAE
2A90:  CLRF   xB1
2A92:  MOVLW  73
2A94:  MOVWF  xB0
2A96:  CLRF   xB3
2A98:  MOVLW  1A
2A9A:  MOVWF  xB2
2A9C:  MOVLW  01
2A9E:  MOVWF  xB4
2AA0:  CLRF   xB5
2AA2:  MOVLB  0
2AA4:  CALL   0E42
....................          break;  
2AA8:  BRA    2B9A
....................       }  
....................       case 12:  
....................       {  
....................          strcpy(temp,"Power UP");  
2AAA:  CLRF   FEA
2AAC:  MOVLW  1A
2AAE:  MOVWF  FE9
2AB0:  MOVFF  FF2,4A7
2AB4:  BCF    FF2.7
2AB6:  MOVLW  00
2AB8:  CALL   0492
2ABC:  TBLRD*-
2ABE:  TBLRD*+
2AC0:  MOVF   FF5,W
2AC2:  MOVWF  FEE
2AC4:  IORLW  00
2AC6:  BNZ   2ABE
2AC8:  MOVLB  4
2ACA:  BTFSC  xA7.7
2ACC:  BSF    FF2.7
....................          glcd_text57(250,115,temp , 1 , ON);  
2ACE:  CLRF   xAF
2AD0:  MOVLW  FA
2AD2:  MOVWF  xAE
2AD4:  CLRF   xB1
2AD6:  MOVLW  73
2AD8:  MOVWF  xB0
2ADA:  CLRF   xB3
2ADC:  MOVLW  1A
2ADE:  MOVWF  xB2
2AE0:  MOVLW  01
2AE2:  MOVWF  xB4
2AE4:  MOVWF  xB5
2AE6:  MOVLB  0
2AE8:  CALL   0E42
....................          delay_ms(1000);  
2AEC:  MOVLW  04
2AEE:  MOVLB  4
2AF0:  MOVWF  xA7
2AF2:  MOVLW  FA
2AF4:  MOVWF  xA8
2AF6:  MOVLB  0
2AF8:  CALL   11C0
2AFC:  MOVLB  4
2AFE:  DECFSZ xA7,F
2B00:  BRA    2AF2
....................          glcd_text57(250,115,temp , 1 , Off);  
2B02:  CLRF   xAF
2B04:  MOVLW  FA
2B06:  MOVWF  xAE
2B08:  CLRF   xB1
2B0A:  MOVLW  73
2B0C:  MOVWF  xB0
2B0E:  CLRF   xB3
2B10:  MOVLW  1A
2B12:  MOVWF  xB2
2B14:  MOVLW  01
2B16:  MOVWF  xB4
2B18:  CLRF   xB5
2B1A:  MOVLB  0
2B1C:  CALL   0E42
....................          break;  
2B20:  BRA    2B9A
....................   
....................       }  
.................... default:  
....................       {  
....................          strcpy(temp,"Unknown Event");  
2B22:  CLRF   FEA
2B24:  MOVLW  1A
2B26:  MOVWF  FE9
2B28:  MOVFF  FF2,4A7
2B2C:  BCF    FF2.7
2B2E:  MOVLW  00
2B30:  CALL   04B6
2B34:  TBLRD*-
2B36:  TBLRD*+
2B38:  MOVF   FF5,W
2B3A:  MOVWF  FEE
2B3C:  IORLW  00
2B3E:  BNZ   2B36
2B40:  MOVLB  4
2B42:  BTFSC  xA7.7
2B44:  BSF    FF2.7
....................          glcd_text57(250,115,temp , 1 , ON);  
2B46:  CLRF   xAF
2B48:  MOVLW  FA
2B4A:  MOVWF  xAE
2B4C:  CLRF   xB1
2B4E:  MOVLW  73
2B50:  MOVWF  xB0
2B52:  CLRF   xB3
2B54:  MOVLW  1A
2B56:  MOVWF  xB2
2B58:  MOVLW  01
2B5A:  MOVWF  xB4
2B5C:  MOVWF  xB5
2B5E:  MOVLB  0
2B60:  CALL   0E42
....................          delay_ms(1000);  
2B64:  MOVLW  04
2B66:  MOVLB  4
2B68:  MOVWF  xA7
2B6A:  MOVLW  FA
2B6C:  MOVWF  xA8
2B6E:  MOVLB  0
2B70:  CALL   11C0
2B74:  MOVLB  4
2B76:  DECFSZ xA7,F
2B78:  BRA    2B6A
....................          glcd_text57(250,115,temp , 1 , Off);  
2B7A:  CLRF   xAF
2B7C:  MOVLW  FA
2B7E:  MOVWF  xAE
2B80:  CLRF   xB1
2B82:  MOVLW  73
2B84:  MOVWF  xB0
2B86:  CLRF   xB3
2B88:  MOVLW  1A
2B8A:  MOVWF  xB2
2B8C:  MOVLW  01
2B8E:  MOVWF  xB4
2B90:  CLRF   xB5
2B92:  MOVLB  0
2B94:  CALL   0E42
....................          break;  
2B98:  BRA    2B9A
....................   
....................       }  
....................    }  
....................   
....................   
....................   
....................   
....................   
....................   
.................... /*while(0)  
....................    {  
....................       RS232_FLAG=0;  
....................   
....................       restart_wdt();  
....................   
....................       x[1]=(Iin-Ioff)/1+120;  
....................       y[1]=(Qin-Qoff)/1+120;  
....................   
....................       for(n=1;n<=MEDIA;++n)  
....................       {  
....................          x[1]+=x[n];  
....................          y[1]+=y[n];  
....................       }  
....................   
....................       x[1]/=n;  
....................       y[1]/=n;  
....................   
....................   
....................       if((x[1]<10||y[1]<10||x[1]>230||y[1]>230)&&!CLUTTER_SUPPRESSOR_INHIBIT_FLAG)  
....................       {  
....................          NULL_OFFSET();  
....................       }  
....................   
....................   
....................   
....................       if(!CLUTTER_SUPPRESSOR_INHIBIT_FLAG)  
....................       {  
....................          if(Iin<50)  
....................             SOPPRESSIONE();  
....................   
....................          if(Qin<50)  
....................             SOPPRESSIONE();  
....................   
....................          if(Iin>4050)  
....................             SOPPRESSIONE();  
....................   
....................          if(Qin>4050)  
....................             SOPPRESSIONE();  
....................   
....................       }  
....................   
....................   
....................   
....................       //if(CLUTTER_SUPPRESSOR_INHIBIT_FLAG)  
....................       {  
....................          if(x[1]<10)  
....................          {  
....................             x[1]=10;  
....................          }  
....................          if(y[1]<10)  
....................          {  
....................             y[1]=10;  
....................          }  
....................          if(x[1]>230)  
....................          {  
....................             x[1]=230;  
....................          }  
....................          if(y[1]>230)  
....................          {  
....................             y[1]=230;  
....................          }  
....................       }  
....................   
....................       cursore(x[1],y[1],ON);  
....................   
....................       delay_us(5000);  
....................   
....................       for(i=(Persistenza);i>0;--i)  
....................       {  
....................          x[i]=x[i-1];  
....................          y[i]=y[i-1];  
....................       }  
....................   
....................       cursore(x[persistenza],y[persistenza],OFF);  
....................   
....................       TEST_SOPPRESSIONE();  
....................       Guadagno();  
....................   
....................       if(get_timer0()<500)  
....................       {  
....................          griglia();  
....................          batteria();  
....................   
....................       }  
....................   
....................       if(RS232_FLAG==0)  
....................          RS232_TEST();  
....................    }  
....................   
....................   
.................... }*/  
....................   
....................    tempo=0;  
2B9A:  MOVLB  4
2B9C:  CLRF   xA4
2B9E:  CLRF   xA3
....................    while(1)  
....................    {  
....................       RS232_FLAG=0;  
2BA0:  BCF    62.0
....................   
....................       restart_wdt();  
2BA2:  CLRWDT
....................   
....................       x[1]=(Iin-Ioff)/1+120;  
2BA4:  MOVF   52,W
2BA6:  SUBWF  4C,W
2BA8:  MOVWF  xA7
2BAA:  MOVF   53,W
2BAC:  SUBWFB 4D,W
2BAE:  MOVWF  xA8
2BB0:  MOVLW  78
2BB2:  ADDWF  xA7,W
2BB4:  MOVWF  69
2BB6:  MOVLW  00
2BB8:  ADDWFC xA8,W
2BBA:  MOVWF  6A
....................       y[1]=(Qin-Qoff)/1+120;  
2BBC:  MOVF   54,W
2BBE:  SUBWF  4E,W
2BC0:  MOVWF  xA7
2BC2:  MOVF   55,W
2BC4:  SUBWFB 4F,W
2BC6:  MOVWF  xA8
2BC8:  MOVLW  78
2BCA:  ADDWF  xA7,W
2BCC:  MOVLB  0
2BCE:  MOVWF  xA7
2BD0:  MOVLW  00
2BD2:  MOVLB  4
2BD4:  ADDWFC xA8,W
2BD6:  MOVLB  0
2BD8:  MOVWF  xA8
....................   
....................       for(n=1;n<=MEDIA;++n)  
2BDA:  MOVLW  01
2BDC:  MOVWF  5A
2BDE:  MOVF   5A,W
2BE0:  SUBWF  5B,W
2BE2:  BNC   2C24
....................       {  
....................          x[1]+=x[n];  
2BE4:  BCF    FD8.0
2BE6:  RLCF   5A,W
2BE8:  CLRF   03
2BEA:  ADDLW  67
2BEC:  MOVWF  FE9
2BEE:  MOVLW  00
2BF0:  ADDWFC 03,W
2BF2:  MOVWF  FEA
2BF4:  MOVFF  FEC,03
2BF8:  MOVF   FED,F
2BFA:  MOVF   FEF,W
2BFC:  ADDWF  69,F
2BFE:  MOVF   03,W
2C00:  ADDWFC 6A,F
....................          y[1]+=y[n];  
2C02:  BCF    FD8.0
2C04:  RLCF   5A,W
2C06:  CLRF   03
2C08:  ADDLW  A5
2C0A:  MOVWF  FE9
2C0C:  MOVLW  00
2C0E:  ADDWFC 03,W
2C10:  MOVWF  FEA
2C12:  MOVFF  FEC,03
2C16:  MOVF   FED,F
2C18:  MOVF   FEF,W
2C1A:  ADDWF  xA7,F
2C1C:  MOVF   03,W
2C1E:  ADDWFC xA8,F
....................       }  
2C20:  INCF   5A,F
2C22:  BRA    2BDE
....................   
....................       x[1]/=n;  
2C24:  MOVFF  6A,4AA
2C28:  MOVFF  69,4A9
2C2C:  MOVLB  4
2C2E:  CLRF   xAC
2C30:  MOVFF  5A,4AB
2C34:  MOVLB  0
2C36:  CALL   1348
2C3A:  MOVFF  02,6A
2C3E:  MOVFF  01,69
....................       y[1]/=n;  
2C42:  MOVFF  A8,4AA
2C46:  MOVFF  A7,4A9
2C4A:  MOVLB  4
2C4C:  CLRF   xAC
2C4E:  MOVFF  5A,4AB
2C52:  MOVLB  0
2C54:  CALL   1348
2C58:  MOVFF  02,A8
2C5C:  MOVFF  01,A7
....................   
....................   
....................       if((x[1]<10||y[1]<10||x[1]>230||y[1]>230))  
2C60:  BTFSC  6A.7
2C62:  BRA    2C98
2C64:  MOVF   6A,F
2C66:  BNZ   2C6E
2C68:  MOVF   69,W
2C6A:  SUBLW  09
2C6C:  BC    2C98
2C6E:  BTFSC  xA8.7
2C70:  BRA    2C98
2C72:  MOVF   xA8,F
2C74:  BNZ   2C7C
2C76:  MOVF   xA7,W
2C78:  SUBLW  09
2C7A:  BC    2C98
2C7C:  BTFSC  6A.7
2C7E:  BRA    2C8A
2C80:  MOVF   6A,F
2C82:  BNZ   2C98
2C84:  MOVF   69,W
2C86:  SUBLW  E6
2C88:  BNC   2C98
2C8A:  BTFSC  xA8.7
2C8C:  BRA    2C9C
2C8E:  MOVF   xA8,F
2C90:  BNZ   2C98
2C92:  MOVF   xA7,W
2C94:  SUBLW  E6
2C96:  BC    2C9C
....................       {  
....................          NULL_OFFSET();  
2C98:  CALL   22B2
....................       }  
....................   
....................   
....................   
....................   
....................          if(Iin<50)  
2C9C:  BTFSC  4D.7
2C9E:  BRA    2CAA
2CA0:  MOVF   4D,F
2CA2:  BNZ   2CAE
2CA4:  MOVF   4C,W
2CA6:  SUBLW  31
2CA8:  BNC   2CAE
....................             SOPPRESSIONE();  
2CAA:  CALL   2402
....................   
....................          if(Qin<50)  
2CAE:  BTFSC  4F.7
2CB0:  BRA    2CBC
2CB2:  MOVF   4F,F
2CB4:  BNZ   2CC0
2CB6:  MOVF   4E,W
2CB8:  SUBLW  31
2CBA:  BNC   2CC0
....................             SOPPRESSIONE();  
2CBC:  CALL   2402
....................   
....................          if(Iin>4050)  
2CC0:  BTFSC  4D.7
2CC2:  BRA    2CD8
2CC4:  MOVF   4D,W
2CC6:  SUBLW  0E
2CC8:  BC    2CD8
2CCA:  XORLW  FF
2CCC:  BNZ   2CD4
2CCE:  MOVF   4C,W
2CD0:  SUBLW  D2
2CD2:  BC    2CD8
....................             SOPPRESSIONE();  
2CD4:  CALL   2402
....................   
....................          if(Qin>4050)  
2CD8:  BTFSC  4F.7
2CDA:  BRA    2CF0
2CDC:  MOVF   4F,W
2CDE:  SUBLW  0E
2CE0:  BC    2CF0
2CE2:  XORLW  FF
2CE4:  BNZ   2CEC
2CE6:  MOVF   4E,W
2CE8:  SUBLW  D2
2CEA:  BC    2CF0
....................             SOPPRESSIONE();  
2CEC:  CALL   2402
....................   
....................          if(x[1]<10)  
2CF0:  BTFSC  6A.7
2CF2:  BRA    2CFE
2CF4:  MOVF   6A,F
2CF6:  BNZ   2D04
2CF8:  MOVF   69,W
2CFA:  SUBLW  09
2CFC:  BNC   2D04
....................             x[1]=10;  
2CFE:  CLRF   6A
2D00:  MOVLW  0A
2D02:  MOVWF  69
....................   
....................          if(y[1]<10)  
2D04:  BTFSC  xA8.7
2D06:  BRA    2D12
2D08:  MOVF   xA8,F
2D0A:  BNZ   2D18
2D0C:  MOVF   xA7,W
2D0E:  SUBLW  09
2D10:  BNC   2D18
....................             y[1]=10;  
2D12:  CLRF   xA8
2D14:  MOVLW  0A
2D16:  MOVWF  xA7
....................   
....................          if(x[1]>230)  
2D18:  BTFSC  6A.7
2D1A:  BRA    2D2C
2D1C:  MOVF   6A,F
2D1E:  BNZ   2D26
2D20:  MOVF   69,W
2D22:  SUBLW  E6
2D24:  BC    2D2C
....................             x[1]=230;  
2D26:  CLRF   6A
2D28:  MOVLW  E6
2D2A:  MOVWF  69
....................   
....................          if(y[1]>230)  
2D2C:  BTFSC  xA8.7
2D2E:  BRA    2D40
2D30:  MOVF   xA8,F
2D32:  BNZ   2D3A
2D34:  MOVF   xA7,W
2D36:  SUBLW  E6
2D38:  BC    2D40
....................             y[1]=230;  
2D3A:  CLRF   xA8
2D3C:  MOVLW  E6
2D3E:  MOVWF  xA7
....................   
....................   
....................          if(!DISPLAY_MODE)  
2D40:  BTFSC  62.2
2D42:  BRA    2D5A
....................             cursore(x[1],y[1],ON);  
2D44:  MOVFF  69,4A9
2D48:  MOVFF  A7,4AA
2D4C:  MOVLW  01
2D4E:  MOVLB  4
2D50:  MOVWF  xAB
2D52:  MOVLB  0
2D54:  CALL   24E2
....................          else  
2D58:  BRA    2DBE
....................          {  
....................             cursore(tempo/15,x[1],ON);  
2D5A:  MOVFF  4A4,4A8
2D5E:  MOVFF  4A3,4A7
2D62:  MOVLB  4
2D64:  CLRF   xAA
2D66:  MOVLW  0F
2D68:  MOVWF  xA9
2D6A:  MOVLB  0
2D6C:  CALL   2512
2D70:  MOVFF  02,4A8
2D74:  MOVFF  01,4A7
2D78:  MOVFF  01,4A9
2D7C:  MOVFF  69,4AA
2D80:  MOVLW  01
2D82:  MOVLB  4
2D84:  MOVWF  xAB
2D86:  MOVLB  0
2D88:  CALL   24E2
....................             cursore(tempo/15,y[1],ON);  
2D8C:  MOVFF  4A4,4A8
2D90:  MOVFF  4A3,4A7
2D94:  MOVLB  4
2D96:  CLRF   xAA
2D98:  MOVLW  0F
2D9A:  MOVWF  xA9
2D9C:  MOVLB  0
2D9E:  CALL   2512
2DA2:  MOVFF  02,4A8
2DA6:  MOVFF  01,4A7
2DAA:  MOVFF  01,4A9
2DAE:  MOVFF  A7,4AA
2DB2:  MOVLW  01
2DB4:  MOVLB  4
2DB6:  MOVWF  xAB
2DB8:  MOVLB  0
2DBA:  CALL   24E2
....................          }  
....................   
....................          if(DISPLAY_MODE&&(tempo>230*15))  
2DBE:  BTFSS  62.2
2DC0:  BRA    2DE6
2DC2:  MOVLB  4
2DC4:  MOVF   xA4,W
2DC6:  SUBLW  0C
2DC8:  BTFSS  FD8.0
2DCA:  BRA    2DD0
2DCC:  MOVLB  0
2DCE:  BRA    2DE6
2DD0:  XORLW  FF
2DD2:  BNZ   2DE0
2DD4:  MOVF   xA3,W
2DD6:  SUBLW  7A
2DD8:  BTFSS  FD8.0
2DDA:  BRA    2DE0
2DDC:  MOVLB  0
2DDE:  BRA    2DE6
....................             REDRAW_DISPLAY();  
2DE0:  MOVLB  0
2DE2:  CALL   255A
....................   
....................          delay_us(9000);  
2DE6:  CLRWDT
2DE8:  MOVLW  08
2DEA:  MOVLB  4
2DEC:  MOVWF  xA8
2DEE:  MOVLB  0
2DF0:  CALL   11C0
2DF4:  MOVLW  09
2DF6:  MOVLB  4
2DF8:  MOVWF  xA7
2DFA:  MOVLW  6F
2DFC:  MOVWF  xA8
2DFE:  MOVLB  0
2E00:  BRA    268C
2E02:  MOVLB  4
2E04:  DECFSZ xA7,F
2E06:  BRA    2DFA
....................   
....................          for(i=(Persistenza);i>0;--i)  
2E08:  CLRF   64
2E0A:  MOVLW  1E
2E0C:  MOVWF  63
2E0E:  BTFSC  64.7
2E10:  BRA    2F12
2E12:  MOVF   64,F
2E14:  BNZ   2E1C
2E16:  MOVF   63,W
2E18:  SUBLW  00
2E1A:  BC    2F12
....................          {  
....................             x[i]=x[i-1];  
2E1C:  MOVFF  64,4DB
2E20:  MOVFF  63,4DA
2E24:  CLRF   xDD
2E26:  MOVLW  02
2E28:  MOVWF  xDC
2E2A:  MOVLB  0
2E2C:  CALL   07E0
2E30:  MOVFF  02,03
2E34:  MOVF   01,W
2E36:  ADDLW  67
2E38:  MOVWF  01
2E3A:  MOVLW  00
2E3C:  ADDWFC 03,F
2E3E:  MOVFF  01,4A7
2E42:  MOVLB  4
2E44:  MOVFF  03,4A8
2E48:  MOVLW  01
2E4A:  SUBWF  63,W
2E4C:  MOVWF  xA9
2E4E:  MOVLW  00
2E50:  SUBWFB 64,W
2E52:  MOVWF  xAA
2E54:  MOVFF  4AA,4DB
2E58:  MOVFF  4A9,4DA
2E5C:  CLRF   xDD
2E5E:  MOVLW  02
2E60:  MOVWF  xDC
2E62:  MOVLB  0
2E64:  CALL   07E0
2E68:  MOVF   01,W
2E6A:  ADDLW  67
2E6C:  MOVWF  FE9
2E6E:  MOVLW  00
2E70:  ADDWFC 02,W
2E72:  MOVWF  FEA
2E74:  MOVFF  FEC,03
2E78:  MOVF   FED,F
2E7A:  MOVFF  FEF,4AA
2E7E:  MOVLB  4
2E80:  MOVFF  4A8,FEA
2E84:  MOVFF  4A7,FE9
2E88:  MOVFF  03,FEC
2E8C:  MOVF   FED,F
2E8E:  MOVFF  4AA,FEF
....................             y[i]=y[i-1];  
2E92:  MOVFF  64,4DB
2E96:  MOVFF  63,4DA
2E9A:  CLRF   xDD
2E9C:  MOVLW  02
2E9E:  MOVWF  xDC
2EA0:  MOVLB  0
2EA2:  CALL   07E0
2EA6:  MOVFF  02,03
2EAA:  MOVF   01,W
2EAC:  ADDLW  A5
2EAE:  MOVWF  01
2EB0:  MOVLW  00
2EB2:  ADDWFC 03,F
2EB4:  MOVFF  01,4A7
2EB8:  MOVLB  4
2EBA:  MOVFF  03,4A8
2EBE:  MOVLW  01
2EC0:  SUBWF  63,W
2EC2:  MOVWF  xA9
2EC4:  MOVLW  00
2EC6:  SUBWFB 64,W
2EC8:  MOVWF  xAA
2ECA:  MOVFF  4AA,4DB
2ECE:  MOVFF  4A9,4DA
2ED2:  CLRF   xDD
2ED4:  MOVLW  02
2ED6:  MOVWF  xDC
2ED8:  MOVLB  0
2EDA:  CALL   07E0
2EDE:  MOVF   01,W
2EE0:  ADDLW  A5
2EE2:  MOVWF  FE9
2EE4:  MOVLW  00
2EE6:  ADDWFC 02,W
2EE8:  MOVWF  FEA
2EEA:  MOVFF  FEC,03
2EEE:  MOVF   FED,F
2EF0:  MOVFF  FEF,4AA
2EF4:  MOVLB  4
2EF6:  MOVFF  4A8,FEA
2EFA:  MOVFF  4A7,FE9
2EFE:  MOVFF  03,FEC
2F02:  MOVF   FED,F
2F04:  MOVFF  4AA,FEF
....................          }  
2F08:  MOVF   63,W
2F0A:  BTFSC  FD8.2
2F0C:  DECF   64,F
2F0E:  DECF   63,F
2F10:  BRA    2E0E
....................   
....................          if(!DISPLAY_MODE)  
2F12:  BTFSC  62.2
2F14:  BRA    2F26
....................             cursore(x[persistenza],y[persistenza],OFF);  
2F16:  MOVFF  A3,4A9
2F1A:  MOVFF  E1,4AA
2F1E:  CLRF   xAB
2F20:  MOVLB  0
2F22:  CALL   24E2
....................   
....................   
....................          TEST_SOPPRESSIONE();  
2F26:  MOVLB  0
2F28:  GOTO   26C8
....................          test_Guadagno();  
2F2C:  GOTO   26DC
....................   
....................   
....................          if(RS232_FLAG==0)  
2F30:  BTFSC  62.0
2F32:  BRA    2F38
....................             RS232_TEST();  
2F34:  CALL   1B38
....................       }  
2F38:  MOVLB  4
2F3A:  BRA    2BA0
....................   
....................   
....................    }  
....................   
....................   
....................  
2F3C:  SLEEP 

Configuration Fuses:
   Word  1: 0900   NOIESO NOFCMEN INTRC
   Word  2: 1319   NOBROWNOUT WDT BORV25 NOPUT WDT512
   Word  3: 8300   PBADEN CCP2C1 NOLPT1OSC MCLR RESERVED
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST RESERVED
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
